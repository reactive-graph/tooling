# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"Arithmetic operation with two inputs and one result"
interface Arithmetic_ArithmeticGate_Component {
  _c__arithmetic__arithmetic_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

"Arithmetic operation with one input and one result"
interface Arithmetic_ArithmeticOperation_Component {
  _c__arithmetic__arithmetic_operation: ID
  lhs: Float
  result: Float
}

"The entity or relation has a description."
interface Base_Describable_Component {
  _c__base__describable: ID
  "The description of an entity or a relation"
  description: String
}

"The entity is licensed."
interface Base_Licensed_Component {
  _c__base__licensed: ID
  "Title, author, source and license. Best practices for attribution: https://wiki.creativecommons.org/wiki/best_practices_for_attribution"
  attribution: String
  "The SPDX license identifier. See: https://spdx.org/licenses/"
  license: String
}

"The entity or relation has a name."
interface Base_Named_Component {
  _c__base__named: ID
  "The name of an entity or a relation"
  name: String
}

"The relations between two entities are ordered using a ordinal number associated with sibling relations"
interface Base_Ordered_Component {
  _c__base__ordered: ID
  "The relation ordinal number associated with sibling relations"
  order: Float
}

"The entity is versioned."
interface Base_Versioned_Component {
  _c__base__versioned: ID
  "The version number. Use semantic versioning. See: https://semver.org/"
  version: String
}

interface Binary_BinaryData_Component {
  _c__binary__binary_data: ID
  data_url: String
}

"Loads binary data"
interface Binary_LoadBinaryData_Component {
  _c__binary__load_binary_data: ID
  data_url: String
}

"Saves binary data"
interface Binary_SaveBinaryData_Component {
  _c__binary__save_binary_data: ID
  data_url: String
}

"The alpha component"
interface Color_Alpha_Component {
  _c__color__alpha: ID
  "Transparency component. 0.0 is fully transparent. 1.0 is fully opaque."
  alpha: Float
}

"The brightness component"
interface Color_Brightness_Component {
  _c__color__brightness: ID
  "Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when saturation goes towards 0.0."
  brightness: Float
}

"The HS components"
interface Color_Hs_Component {
  _c__color__hs: ID
  "The hue of the color, in degrees. Decides if itâ€™s red, blue, purple, etc."
  hue: Float
  "The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors."
  saturation: Float
}

"The lightness component"
interface Color_Lightness_Component {
  _c__color__lightness: ID
  "Decides how light the color will look. 0.0 will be black, 0.5 will give a clear color, and 1.0 will give white."
  lightness: Float
}

"The color in RGB color space."
interface Color_Rgb_Component {
  _c__color__rgb: ID
  "Blue"
  blue: Float
  "Green"
  green: Float
  "Red"
  red: Float
}

interface Comparison_ComparisonGate_Component {
  _c__comparison__comparison_gate: ID
  lhs: JSON
  rhs: JSON
}

interface Comparison_ComparisonNumeric_Component {
  _c__comparison__comparison_numeric: ID
  lhs: Float
  rhs: Float
}

"Loads a configuration file"
interface Config_ConfigFile_Component {
  _c__config__config_file: ID
  result: JSON
}

"A buffer of the given size"
interface Connector_Buffer_Component {
  _c__connector__buffer: ID
  "The buffer with up to buffer_size elements"
  buffer: JSON
  "The number of elements of the buffer"
  buffer_size: Float
}

"Connects a property of an entity instance with a other property of another entity instance"
interface Connector_Connector_Component {
  _c__connector__connector: ID
  "The name of the inbound property"
  inbound_property_name: String
  "The name of the outbound property"
  outbound_property_name: String
}

"Counts the number of propagations"
interface Connector_PropagationCounter_Component {
  _c__connector__propagation_counter: ID
  "The count of propagations"
  propagation_count: Float
}

"This components spawns events."
interface Core_Event_Component {
  _c__core__event: ID
  event: JSON
}

"The label is an hierarchical path with static segments, named parameters and catch-all parameters."
interface Core_Labeled_Component {
  _c__core__labeled: ID
  label: String
}

"Entities have a outbound relations and a inbound relations as well as components and properties "
interface Entity {
  id: ID!
}

"Represents a file in the file system"
interface File_File_Component {
  _c__file__file: ID
  "The filename"
  filename: String
}

"Triggers if the file with the given filename has been changed"
interface File_FsNotify_Component {
  _c__file__fs_notify: ID
  "The filename"
  filename: String
  "Triggers if the file with the given filename has been changed"
  trigger: Boolean
}

"Git repository"
interface Git_Repository_Component {
  _c__git__repository: ID
  "The current branch name."
  branch: String
  "Fast forward"
  fast_forward: Boolean
  "Fetches the remotes"
  fetch: Boolean
  "Merges the given local branch into the current branch"
  merge_from: String
  "Pushes the current branch to the remote"
  push: Boolean
  "The branch of the remote repository."
  remote_branch: String
  "The name of the remote repository."
  remote_name: String
}

"The transfer progress"
interface Git_TransferProgress_Component {
  _c__git__transfer_progress: ID
  indexed_deltas: Float
  indexed_objects: Float
  local_objects: Float
  received_bytes: Float
  received_objects: Float
  total_deltas: Float
  total_objects: Float
}

"Sends HTTP request to a given URL"
interface Http_Http_Component {
  _c__http__http: ID
}

"Sends JSON-RPC request to a given URL"
interface Http_JsonRpc_Component {
  _c__http__json_rpc: ID
  error: JSON
  json_rpc_version: String
  method: String
  params: JSON
  result: JSON
}

"A HTTP request"
interface Http_Request_Component {
  _c__http__request: ID
  "The HTTP request method"
  method: String
  "The HTTP request payload"
  payload: JSON
  "The HTTP request headers"
  request_headers: JSON
}

"A HTTP response"
interface Http_Response_Component {
  _c__http__response: ID
  "The HTTP response headers"
  response_headers: JSON
  "The HTTP response status code"
  status: Float
}

"A Uniform Resource Locator (URL), colloquially termed as a web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it."
interface Http_Url_Component {
  _c__http__url: ID
  "Uniform Resource Locator"
  url: String
}

"Loads a JSON file"
interface Json_LoadJson_Component {
  _c__json__load_json: ID
}

"Saves an object as JSON file"
interface Json_SaveJson_Component {
  _c__json__save_json: ID
  payload: JSON
}

"Depending on the given condition outputs a result"
interface Logical_Condition_Component {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "The result"
  result: JSON
}

"Executes a logical operation on the inputs lhs and rhs and outputs the result"
interface Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Executes a logical operation on the input lhs and outputs the result"
interface Logical_LogicalOperation_Component {
  _c__logical__logical_operation: ID
  lhs: Boolean
  result: Boolean
}

interface Metadata_DublinCore_Component {
  _c__metadata__dublin_core: ID
  "An entity responsible for making contributions to the resource."
  dc_contributor: String
  "The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant"
  dc_coverage: String
  "An entity primarily responsible for making the resource"
  dc_creator: String
  "A point or period of time associated with an event in the lifecycle of the resource"
  dc_date: String
  "An account of the resource"
  dc_description: String
  "The file format, physical medium, or dimensions of the resource"
  dc_format: String
  "An unambiguous reference to the resource within a given context"
  dc_identifier: String
  "A language of the resource"
  dc_language: String
  "An entity responsible for making the resource available"
  dc_publisher: String
  "A related resource"
  dc_relation: String
  "Information about rights held in and over the resource"
  dc_rights: String
  "A related resource from which the described resource is derived"
  dc_source: String
  "The topic of the resource"
  dc_subject: String
  "A name given to the resource"
  dc_title: String
  "The nature or genre of the resource"
  dc_type: String
}

interface Metadata_Id3_Component {
  _c__metadata__id3: ID
  id3_talb: String
}

interface Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

interface Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  lhs: Float
  result: Float
}

"Pseudo Number Generator"
interface Random_PseudoNumberGenerator_Component {
  _c__random__pseudo_number_generator: ID
  seed: Float
}

"Range"
interface Random_Range_Component {
  _c__random__range: ID
  high: Float
  low: Float
}

"Relations have a outbound entity and a inbound entity as well as components and properties,"
interface Relation {
  instance_id: ID!
  key: ID!
}

"The entity returns data of any datatype"
interface Result_ResultAny_Component {
  _c__result__result_any: ID
  "The result"
  result: JSON
}

"The entity returns an array"
interface Result_ResultArray_Component {
  _c__result__result_array: ID
  "The result"
  result: JSON
}

"The entity returns a boolean"
interface Result_ResultBoolean_Component {
  _c__result__result_boolean: ID
  "The result"
  result: Boolean
}

"The entity returns a number"
interface Result_ResultNumber_Component {
  _c__result__result_number: ID
  "The result"
  result: Float
}

"The entity returns an object"
interface Result_ResultObject_Component {
  _c__result__result_object: ID
  "The result"
  result: JSON
}

"The entity returns a string"
interface Result_ResultString_Component {
  _c__result__result_string: ID
  "The result"
  result: String
}

"State of type array"
interface State_StateArray_Component {
  _c__state__state_array: ID
  set_state: JSON
  state: JSON
}

"State of type boolean"
interface State_StateBoolean_Component {
  _c__state__state_boolean: ID
  set_state: Boolean
  state: Boolean
}

interface State_StateDebuggerDebug_Component {
  _c__state__state_debugger_debug: ID
}

interface State_StateDebuggerTrace_Component {
  _c__state__state_debugger_trace: ID
}

"State of type number"
interface State_StateNumber_Component {
  _c__state__state_number: ID
  set_state: Float
  state: Float
}

"State of type object"
interface State_StateObject_Component {
  _c__state__state_object: ID
  set_state: JSON
  state: JSON
}

"State of type string"
interface State_StateString_Component {
  _c__state__state_string: ID
  set_state: String
  state: String
}

interface String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  lhs: String
  result: Boolean
}

interface String_StringComparison_Component {
  _c__string__string_comparison: ID
  lhs: String
  result: Boolean
  rhs: String
}

interface String_StringGate_Component {
  _c__string__string_gate: ID
  lhs: String
  result: String
  rhs: String
}

interface String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  lhs: String
  result: Float
}

interface String_StringOperation_Component {
  _c__string__string_operation: ID
  lhs: String
  result: String
}

interface String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  lhs: String
  result: Float
  rhs: String
}

interface Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  weight: Float
}

"An action can be triggered"
interface Trigger_Action_Component {
  _c__trigger__action: ID
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"A generator sends a trigger"
interface Trigger_Generator_Component {
  _c__trigger__generator: ID
  "Sends a boolean trigger"
  trigger: Boolean
}

"Value of type array"
interface Value_ValueArray_Component {
  _c__value__value_array: ID
  value: JSON
}

"Value of type boolean"
interface Value_ValueBoolean_Component {
  _c__value__value_boolean: ID
  value: Boolean
}

interface Value_ValueDebuggerDebug_Component {
  _c__value__value_debugger_debug: ID
}

interface Value_ValueDebuggerTrace_Component {
  _c__value__value_debugger_trace: ID
}

"Value of type number"
interface Value_ValueNumber_Component {
  _c__value__value_number: ID
  value: Float
}

"Value of type object"
interface Value_ValueObject_Component {
  _c__value__value_object: ID
  value: JSON
}

"Value of type string"
interface Value_ValueString_Component {
  _c__value__value_string: ID
  value: String
}

"Any entity."
union AllEntities = ArithmeticF64_Add_Entity | ArithmeticF64_Decrement_Entity | ArithmeticF64_Div_Entity | ArithmeticF64_Increment_Entity | ArithmeticF64_Max_Entity | ArithmeticF64_Min_Entity | ArithmeticF64_Mod_Entity | ArithmeticF64_Mul_Entity | ArithmeticF64_Sub_Entity | ArithmeticI64_Add_Entity | ArithmeticI64_Decrement_Entity | ArithmeticI64_Div_Entity | ArithmeticI64_Increment_Entity | ArithmeticI64_Max_Entity | ArithmeticI64_Min_Entity | ArithmeticI64_Mod_Entity | ArithmeticI64_Mul_Entity | ArithmeticI64_Sub_Entity | ArithmeticU64_Add_Entity | ArithmeticU64_Counter_Entity | ArithmeticU64_Decrement_Entity | ArithmeticU64_Div_Entity | ArithmeticU64_Increment_Entity | ArithmeticU64_Max_Entity | ArithmeticU64_Min_Entity | ArithmeticU64_Mod_Entity | ArithmeticU64_Mul_Entity | ArithmeticU64_Sub_Entity | Base_Comment_Entity | Binary_LoadBinaryData_Entity | Binary_SaveBinaryData_Entity | Color_Hsl_Entity | Color_HsvToRgb_Entity | Color_Hsv_Entity | Color_RgbToHsv_Entity | Color_Rgb_Entity | Color_Rgba_Entity | Comparison_Equals_Entity | Comparison_GreaterThanOrEquals_Entity | Comparison_GreaterThan_Entity | Comparison_LowerThanOrEquals_Entity | Comparison_LowerThan_Entity | Comparison_NotEquals_Entity | Config_ConfigFile_Entity | Core_Shutdown_Entity | Core_SystemEvent_Entity | DateTime_Day_Entity | DateTime_Hour_Entity | DateTime_Minute_Entity | DateTime_Month_Entity | DateTime_UtcNow_Entity | DateTime_UtcTimestamp_Entity | DateTime_Year_Entity | Flow_Comment_Entity | Flow_GenericFlow_Entity | Git_Repository_Entity | Http_Http_Entity | Http_JsonRpc_Entity | Json_ArrayContains_Entity | Json_ArrayGetByIndex_Entity | Json_ArrayLength_Entity | Json_ArrayPop_Entity | Json_ArrayPush_Entity | Json_ArrayReverse_Entity | Json_LoadJson_Entity | Json_ObjectGetProperty_Entity | Json_ObjectKeys_Entity | Json_ObjectRemoveProperty_Entity | Json_ObjectSetProperty_Entity | Json_SaveJson_Entity | Logical_And3_Entity | Logical_And_Entity | Logical_IfThenElse_Entity | Logical_Nand_Entity | Logical_Nor_Entity | Logical_Not_Entity | Logical_Or_Entity | Logical_Toggle_Entity | Logical_Trigger_Entity | Logical_Xnor_Entity | Logical_Xor_Entity | NumericF64_Abs_Entity | NumericF64_Acos_Entity | NumericF64_Acosh_Entity | NumericF64_Asin_Entity | NumericF64_Asinh_Entity | NumericF64_Atan2_Entity | NumericF64_Atan_Entity | NumericF64_Atanh_Entity | NumericF64_Cbrt_Entity | NumericF64_Ceil_Entity | NumericF64_Cos_Entity | NumericF64_Cosh_Entity | NumericF64_Exp2_Entity | NumericF64_Exp_Entity | NumericF64_Floor_Entity | NumericF64_Fract_Entity | NumericF64_Hypot_Entity | NumericF64_Ln_Entity | NumericF64_Log10_Entity | NumericF64_Log2_Entity | NumericF64_Log_Entity | NumericF64_Pow_Entity | NumericF64_Recip_Entity | NumericF64_Round_Entity | NumericF64_Signum_Entity | NumericF64_Sin_Entity | NumericF64_Sinh_Entity | NumericF64_Sqrt_Entity | NumericF64_Tan_Entity | NumericF64_Tanh_Entity | NumericF64_ToDegrees_Entity | NumericF64_ToRadians_Entity | NumericF64_Trunc_Entity | NumericI64_Abs_Entity | NumericI64_Signum_Entity | Random_RandomBool_Entity | Random_RandomF64Pseudo_Entity | Random_RandomF64Range_Entity | Random_RandomF64_Entity | Random_RandomI64Pseudo_Entity | Random_RandomI64Range_Entity | Random_RandomI64_Entity | Random_RandomString_Entity | Random_RandomU64Pseudo_Entity | Random_RandomU64Range_Entity | Random_RandomU64_Entity | Random_RandomUuid_Entity | State_StateArray_Entity | State_StateBoolean_Entity | State_StateNumber_Entity | State_StateObject_Entity | State_StateString_Entity | String_CamelCase_Entity | String_Capitalize_Entity | String_CharCountGraphemes_Entity | String_CharCount_Entity | String_ChopAfterLast_Entity | String_ChopAfter_Entity | String_ChopBeforeLast_Entity | String_ChopBefore_Entity | String_ChopRemovePrefix_Entity | String_ChopRemoveSuffix_Entity | String_Concat_Entity | String_Contains_Entity | String_CountSubstrings_Entity | String_CountUniqueWords_Entity | String_CountWords_Entity | String_Decapitalize_Entity | String_EndsWith_Entity | String_EscapeHtml_Entity | String_EscapeRegexp_Entity | String_IsAlphaDigit_Entity | String_IsAlpha_Entity | String_IsBlank_Entity | String_IsCamelCase_Entity | String_IsCapitalize_Entity | String_IsDecapitalize_Entity | String_IsDigit_Entity | String_IsEmpty_Entity | String_IsKebabCase_Entity | String_IsLowerFirst_Entity | String_IsLowercase_Entity | String_IsNumeric_Entity | String_IsPascalCase_Entity | String_IsShoutyKebabCase_Entity | String_IsShoutySnakeCase_Entity | String_IsSnakeCase_Entity | String_IsTitleCase_Entity | String_IsTrainCase_Entity | String_IsUpperFirst_Entity | String_IsUppercase_Entity | String_KebabCase_Entity | String_LowerFirst_Entity | String_Lowercase_Entity | String_PascalCase_Entity | String_Reverse_Entity | String_ShoutyKebabCase_Entity | String_ShoutySnakeCase_Entity | String_SnakeCase_Entity | String_StartsWith_Entity | String_StringLength_Entity | String_StripHtmlTags_Entity | String_SwapCase_Entity | String_Templating_Entity | String_TitleCase_Entity | String_TrainCase_Entity | String_TrimEnd_Entity | String_TrimStart_Entity | String_Trim_Entity | String_UnescapeHtml_Entity | String_UpperFirst_Entity | String_Uppercase_Entity | System_SystemEnv_Entity | Taxonomy_Category_Entity | Taxonomy_Tag_Entity | Value_ValueArray_Entity | Value_ValueBoolean_Entity | Value_ValueNumber_Entity | Value_ValueObject_Entity | Value_ValueString_Entity

"Mutations for entities and relations on the namespace ArithmeticF64"
type ArithmeticF64Mutations {
  "Adds two floating point numbers"
  add(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Add_Entity_Mutations!
  createAdd(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Add_Entity!
  createDecrement(id: ID, lhs: Float!, result: Float): ArithmeticF64_Decrement_Entity!
  createDiv(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Div_Entity!
  createIncrement(id: ID, lhs: Float!, result: Float): ArithmeticF64_Increment_Entity!
  createMax(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Max_Entity!
  createMin(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Min_Entity!
  createMod(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Mod_Entity!
  createMul(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Mul_Entity!
  createSub(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticF64_Sub_Entity!
  "Decrements a number"
  decrement(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticF64_Decrement_Entity_Mutations!
  "Divides two floating point numbers"
  div(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Div_Entity_Mutations!
  "Increments a number"
  increment(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticF64_Increment_Entity_Mutations!
  "Returns the maximum value of two inputs"
  max(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Max_Entity_Mutations!
  "Returns the minimum value of two inputs"
  min(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Min_Entity_Mutations!
  "Modulo"
  mod(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Mod_Entity_Mutations!
  "Multiply two floating point numbers"
  mul(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Mul_Entity_Mutations!
  "Subtract an floating point number from another floating point number"
  sub(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticF64_Sub_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace ArithmeticF64"
type ArithmeticF64Namespace {
  "Adds two floating point numbers"
  add(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Add_Entity!]!
  "Decrements a number"
  decrement(id: String, label: String, lhs: Float, result: Float): [ArithmeticF64_Decrement_Entity!]!
  "Divides two floating point numbers"
  div(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Div_Entity!]!
  "Increments a number"
  increment(id: String, label: String, lhs: Float, result: Float): [ArithmeticF64_Increment_Entity!]!
  "Returns the maximum value of two inputs"
  max(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Max_Entity!]!
  "Returns the minimum value of two inputs"
  min(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Min_Entity!]!
  "Modulo"
  mod(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Mod_Entity!]!
  "Multiply two floating point numbers"
  mul(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Mul_Entity!]!
  "Subtract an floating point number from another floating point number"
  sub(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticF64_Sub_Entity!]!
}

"Adds two floating point numbers"
type ArithmeticF64_Add_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Add_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Add_Entity!]!
}

"Decrements a number"
type ArithmeticF64_Decrement_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticF64_Decrement_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticF64_Decrement_Entity!]!
}

"Divides two floating point numbers"
type ArithmeticF64_Div_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Div_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Div_Entity!]!
}

"Increments a number"
type ArithmeticF64_Increment_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticF64_Increment_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticF64_Increment_Entity!]!
}

"Returns the maximum value of two inputs"
type ArithmeticF64_Max_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Max_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Max_Entity!]!
}

"Returns the minimum value of two inputs"
type ArithmeticF64_Min_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Min_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Min_Entity!]!
}

"Modulo"
type ArithmeticF64_Mod_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Mod_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Mod_Entity!]!
}

"Multiply two floating point numbers"
type ArithmeticF64_Mul_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Mul_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Mul_Entity!]!
}

"Subtract an floating point number from another floating point number"
type ArithmeticF64_Sub_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticF64_Sub_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticF64_Sub_Entity!]!
}

"Mutations for entities and relations on the namespace ArithmeticI64"
type ArithmeticI64Mutations {
  "Adds two signed integer numbers"
  add(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Add_Entity_Mutations!
  createAdd(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Add_Entity!
  createDecrement(id: ID, lhs: Float!, result: Float): ArithmeticI64_Decrement_Entity!
  createDiv(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Div_Entity!
  createIncrement(id: ID, lhs: Float!, result: Float): ArithmeticI64_Increment_Entity!
  createMax(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Max_Entity!
  createMin(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Min_Entity!
  createMod(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Mod_Entity!
  createMul(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Mul_Entity!
  createSub(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticI64_Sub_Entity!
  "Decrements a signed integer number"
  decrement(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticI64_Decrement_Entity_Mutations!
  "Divides two signed integer numbers"
  div(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Div_Entity_Mutations!
  "Increments a signed integer number"
  increment(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticI64_Increment_Entity_Mutations!
  "Returns the maximum value of two signed integer numbers"
  max(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Max_Entity_Mutations!
  "Returns the minimum value of two signed integer numbers"
  min(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Min_Entity_Mutations!
  "Modulo"
  mod(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Mod_Entity_Mutations!
  "Multiply two signed integer numbers"
  mul(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Mul_Entity_Mutations!
  "Subtract an signed integer number from another signed integer number"
  sub(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticI64_Sub_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace ArithmeticI64"
type ArithmeticI64Namespace {
  "Adds two signed integer numbers"
  add(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Add_Entity!]!
  "Decrements a signed integer number"
  decrement(id: String, label: String, lhs: Float, result: Float): [ArithmeticI64_Decrement_Entity!]!
  "Divides two signed integer numbers"
  div(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Div_Entity!]!
  "Increments a signed integer number"
  increment(id: String, label: String, lhs: Float, result: Float): [ArithmeticI64_Increment_Entity!]!
  "Returns the maximum value of two signed integer numbers"
  max(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Max_Entity!]!
  "Returns the minimum value of two signed integer numbers"
  min(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Min_Entity!]!
  "Modulo"
  mod(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Mod_Entity!]!
  "Multiply two signed integer numbers"
  mul(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Mul_Entity!]!
  "Subtract an signed integer number from another signed integer number"
  sub(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticI64_Sub_Entity!]!
}

"Adds two signed integer numbers"
type ArithmeticI64_Add_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Add_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Add_Entity!]!
}

"Decrements a signed integer number"
type ArithmeticI64_Decrement_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticI64_Decrement_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticI64_Decrement_Entity!]!
}

"Divides two signed integer numbers"
type ArithmeticI64_Div_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Div_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Div_Entity!]!
}

"Increments a signed integer number"
type ArithmeticI64_Increment_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticI64_Increment_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticI64_Increment_Entity!]!
}

"Returns the maximum value of two signed integer numbers"
type ArithmeticI64_Max_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Max_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Max_Entity!]!
}

"Returns the minimum value of two signed integer numbers"
type ArithmeticI64_Min_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Min_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Min_Entity!]!
}

"Modulo"
type ArithmeticI64_Mod_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Mod_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Mod_Entity!]!
}

"Multiply two signed integer numbers"
type ArithmeticI64_Mul_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Mul_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Mul_Entity!]!
}

"Subtract an signed integer number from another signed integer number"
type ArithmeticI64_Sub_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticI64_Sub_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticI64_Sub_Entity!]!
}

"Queries for components, entities and relations on the namespace Arithmetic"
type ArithmeticNamespace {
  "Arithmetic operation with two inputs and one result"
  arithmeticGateComponent: [Arithmetic_ArithmeticGate_Component!]!
  "Arithmetic operation with one input and one result"
  arithmeticOperationComponent: [Arithmetic_ArithmeticOperation_Component!]!
}

"Mutations for entities and relations on the namespace ArithmeticU64"
type ArithmeticU64Mutations {
  "Adds two unsigned integer numbers"
  add(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Add_Entity_Mutations!
  "If triggered the counter will be increased"
  counter(id: ID, ids: [ID!], label: String, result: Float, trigger: Boolean): ArithmeticU64_Counter_Entity_Mutations!
  createAdd(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Add_Entity!
  createCounter(id: ID, result: Float, trigger: Boolean!): ArithmeticU64_Counter_Entity!
  createDecrement(id: ID, lhs: Float!, result: Float): ArithmeticU64_Decrement_Entity!
  createDiv(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Div_Entity!
  createIncrement(id: ID, lhs: Float!, result: Float): ArithmeticU64_Increment_Entity!
  createMax(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Max_Entity!
  createMin(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Min_Entity!
  createMod(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Mod_Entity!
  createMul(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Mul_Entity!
  createSub(id: ID, lhs: Float!, result: Float, rhs: Float!): ArithmeticU64_Sub_Entity!
  "Decrements a unsigned integer number"
  decrement(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticU64_Decrement_Entity_Mutations!
  "Divides two unsigned integer numbers"
  div(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Div_Entity_Mutations!
  "Increments a unsigned integer number"
  increment(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): ArithmeticU64_Increment_Entity_Mutations!
  "Returns the maximum value of two unsigned integer numbers"
  max(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Max_Entity_Mutations!
  "Returns the minimum value of two unsigned integer numbers"
  min(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Min_Entity_Mutations!
  "Modulo"
  mod(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Mod_Entity_Mutations!
  "Multiply two unsigned integer numbers"
  mul(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Mul_Entity_Mutations!
  "Subtract an unsigned integer number from another unsigned integer number"
  sub(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): ArithmeticU64_Sub_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace ArithmeticU64"
type ArithmeticU64Namespace {
  "Adds two unsigned integer numbers"
  add(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Add_Entity!]!
  "If triggered the counter will be increased"
  counter(id: String, label: String, result: Float, trigger: Boolean): [ArithmeticU64_Counter_Entity!]!
  "Decrements a unsigned integer number"
  decrement(id: String, label: String, lhs: Float, result: Float): [ArithmeticU64_Decrement_Entity!]!
  "Divides two unsigned integer numbers"
  div(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Div_Entity!]!
  "Increments a unsigned integer number"
  increment(id: String, label: String, lhs: Float, result: Float): [ArithmeticU64_Increment_Entity!]!
  "Returns the maximum value of two unsigned integer numbers"
  max(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Max_Entity!]!
  "Returns the minimum value of two unsigned integer numbers"
  min(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Min_Entity!]!
  "Modulo"
  mod(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Mod_Entity!]!
  "Multiply two unsigned integer numbers"
  mul(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Mul_Entity!]!
  "Subtract an unsigned integer number from another unsigned integer number"
  sub(id: String, label: String, lhs: Float, result: Float, rhs: Float): [ArithmeticU64_Sub_Entity!]!
}

"Adds two unsigned integer numbers"
type ArithmeticU64_Add_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Add_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Add_Entity!]!
}

"If triggered the counter will be increased"
type ArithmeticU64_Counter_Entity implements Entity & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type ArithmeticU64_Counter_Entity_Mutations {
  delete: [ID!]!
  trigger: [ArithmeticU64_Counter_Entity!]!
  update(trigger: Boolean): [ArithmeticU64_Counter_Entity!]!
}

"Decrements a unsigned integer number"
type ArithmeticU64_Decrement_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticU64_Decrement_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticU64_Decrement_Entity!]!
}

"Divides two unsigned integer numbers"
type ArithmeticU64_Div_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Div_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Div_Entity!]!
}

"Increments a unsigned integer number"
type ArithmeticU64_Increment_Entity implements Arithmetic_ArithmeticOperation_Component & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type ArithmeticU64_Increment_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [ArithmeticU64_Increment_Entity!]!
}

"Returns the maximum value of two unsigned integer numbers"
type ArithmeticU64_Max_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Max_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Max_Entity!]!
}

"Returns the minimum value of two unsigned integer numbers"
type ArithmeticU64_Min_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Min_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Min_Entity!]!
}

"Modulo"
type ArithmeticU64_Mod_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Mod_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Mod_Entity!]!
}

"Multiply two unsigned integer numbers"
type ArithmeticU64_Mul_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Mul_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Mul_Entity!]!
}

"Subtract an unsigned integer number from another unsigned integer number"
type ArithmeticU64_Sub_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type ArithmeticU64_Sub_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [ArithmeticU64_Sub_Entity!]!
}

"Mutations for entities and relations on the namespace Base"
type BaseMutations {
  "A simple comment"
  comment(description: String, id: ID, ids: [ID!], label: String, name: String): Base_Comment_Entity_Mutations!
  createComment(description: String!, id: ID, name: String!): Base_Comment_Entity!
}

"Queries for components, entities and relations on the namespace Base"
type BaseNamespace {
  "A simple comment"
  comment(description: String, id: String, label: String, name: String): [Base_Comment_Entity!]!
  "The entity or relation has a description."
  describableComponent: [Base_Describable_Component!]!
  "The entity is licensed."
  licensedComponent: [Base_Licensed_Component!]!
  "The entity or relation has a name."
  namedComponent: [Base_Named_Component!]!
  "The relations between two entities are ordered using a ordinal number associated with sibling relations"
  orderedComponent: [Base_Ordered_Component!]!
  "The entity is versioned."
  versionedComponent: [Base_Versioned_Component!]!
}

"A simple comment"
type Base_Comment_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The name of an entity or a relation"
  name: String
}

type Base_Comment_Entity_Mutations {
  delete: [ID!]!
  update(description: String, name: String): [Base_Comment_Entity!]!
}

"Mutations for entities and relations on the namespace Binary"
type BinaryMutations {
  createLoadBinaryData(data_url: String!, filename: String!, id: ID, name: String!, trigger: Boolean!): Binary_LoadBinaryData_Entity!
  createSaveBinaryData(data_url: String!, filename: String!, id: ID, name: String!, trigger: Boolean!): Binary_SaveBinaryData_Entity!
  "Loads binary data"
  loadBinaryData(data_url: String, filename: String, id: ID, ids: [ID!], label: String, name: String, trigger: Boolean): Binary_LoadBinaryData_Entity_Mutations!
  "Saves binary data"
  saveBinaryData(data_url: String, filename: String, id: ID, ids: [ID!], label: String, name: String, trigger: Boolean): Binary_SaveBinaryData_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Binary"
type BinaryNamespace {
  binaryDataComponent: [Binary_BinaryData_Component!]!
  "Loads binary data"
  loadBinaryData(data_url: String, filename: String, id: String, label: String, name: String, trigger: Boolean): [Binary_LoadBinaryData_Entity!]!
  "Loads binary data"
  loadBinaryDataComponent: [Binary_LoadBinaryData_Component!]!
  "Saves binary data"
  saveBinaryData(data_url: String, filename: String, id: String, label: String, name: String, trigger: Boolean): [Binary_SaveBinaryData_Entity!]!
  "Saves binary data"
  saveBinaryDataComponent: [Binary_SaveBinaryData_Component!]!
}

"Loads binary data"
type Binary_LoadBinaryData_Entity implements Base_Named_Component & Binary_BinaryData_Component & Binary_LoadBinaryData_Component & Entity & File_File_Component & Trigger_Action_Component {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__load_binary_data: ID
  _c__file__file: ID
  _c__trigger__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Binary_LoadBinaryData_Entity_Mutations {
  delete: [ID!]!
  trigger: [Binary_LoadBinaryData_Entity!]!
  update(data_url: String, filename: String, name: String, trigger: Boolean): [Binary_LoadBinaryData_Entity!]!
}

"Saves binary data"
type Binary_SaveBinaryData_Entity implements Base_Named_Component & Binary_BinaryData_Component & Binary_SaveBinaryData_Component & Entity & File_File_Component & Trigger_Action_Component {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__save_binary_data: ID
  _c__file__file: ID
  _c__trigger__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Binary_SaveBinaryData_Entity_Mutations {
  delete: [ID!]!
  trigger: [Binary_SaveBinaryData_Entity!]!
  update(data_url: String, filename: String, name: String, trigger: Boolean): [Binary_SaveBinaryData_Entity!]!
}

"Mutations for entities and relations on the namespace Color"
type ColorMutations {
  createHsl(hue: Float!, id: ID, lightness: Float!, saturation: Float!): Color_Hsl_Entity!
  createHsv(brightness: Float!, hue: Float!, id: ID, saturation: Float!): Color_Hsv_Entity!
  createHsvToRgb(blue: Float!, brightness: Float!, green: Float!, hue: Float!, id: ID, red: Float!, saturation: Float!): Color_HsvToRgb_Entity!
  createRgb(blue: Float!, green: Float!, id: ID, red: Float!): Color_Rgb_Entity!
  createRgbToHsv(blue: Float!, brightness: Float!, green: Float!, hue: Float!, id: ID, red: Float!, saturation: Float!): Color_RgbToHsv_Entity!
  createRgba(alpha: Float!, blue: Float!, green: Float!, id: ID, red: Float!): Color_Rgba_Entity!
  "The color in HSL color space (Hue, saturation, lightness)."
  hsl(hue: Float, id: ID, ids: [ID!], label: String, lightness: Float, saturation: Float): Color_Hsl_Entity_Mutations!
  "The color in HSV color space (Hue, saturation, value)"
  hsv(brightness: Float, hue: Float, id: ID, ids: [ID!], label: String, saturation: Float): Color_Hsv_Entity_Mutations!
  "Converts the color in HSV color space to RGB color space"
  hsvToRgb(blue: Float, brightness: Float, green: Float, hue: Float, id: ID, ids: [ID!], label: String, red: Float, saturation: Float): Color_HsvToRgb_Entity_Mutations!
  "The color in RGB color space."
  rgb(blue: Float, green: Float, id: ID, ids: [ID!], label: String, red: Float): Color_Rgb_Entity_Mutations!
  "Converts the color in RGB color space to HSV color space"
  rgbToHsv(blue: Float, brightness: Float, green: Float, hue: Float, id: ID, ids: [ID!], label: String, red: Float, saturation: Float): Color_RgbToHsv_Entity_Mutations!
  "The color in RGB color space with the alpha channel."
  rgba(alpha: Float, blue: Float, green: Float, id: ID, ids: [ID!], label: String, red: Float): Color_Rgba_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Color"
type ColorNamespace {
  "The alpha component"
  alphaComponent: [Color_Alpha_Component!]!
  "The brightness component"
  brightnessComponent: [Color_Brightness_Component!]!
  "The HS components"
  hsComponent: [Color_Hs_Component!]!
  "The color in HSL color space (Hue, saturation, lightness)."
  hsl(hue: Float, id: String, label: String, lightness: Float, saturation: Float): [Color_Hsl_Entity!]!
  "The color in HSV color space (Hue, saturation, value)"
  hsv(brightness: Float, hue: Float, id: String, label: String, saturation: Float): [Color_Hsv_Entity!]!
  "Converts the color in HSV color space to RGB color space"
  hsvToRgb(blue: Float, brightness: Float, green: Float, hue: Float, id: String, label: String, red: Float, saturation: Float): [Color_HsvToRgb_Entity!]!
  "The lightness component"
  lightnessComponent: [Color_Lightness_Component!]!
  "The color in RGB color space."
  rgb(blue: Float, green: Float, id: String, label: String, red: Float): [Color_Rgb_Entity!]!
  "The color in RGB color space."
  rgbComponent: [Color_Rgb_Component!]!
  "Converts the color in RGB color space to HSV color space"
  rgbToHsv(blue: Float, brightness: Float, green: Float, hue: Float, id: String, label: String, red: Float, saturation: Float): [Color_RgbToHsv_Entity!]!
  "The color in RGB color space with the alpha channel."
  rgba(alpha: Float, blue: Float, green: Float, id: String, label: String, red: Float): [Color_Rgba_Entity!]!
}

"The color in HSL color space (Hue, saturation, lightness)."
type Color_Hsl_Entity implements Color_Hs_Component & Color_Lightness_Component & Entity {
  _c__color__hs: ID
  _c__color__lightness: ID
  "The hue of the color, in degrees. Decides if itâ€™s red, blue, purple, etc."
  hue: Float
  id: ID!
  "Decides how light the color will look. 0.0 will be black, 0.5 will give a clear color, and 1.0 will give white."
  lightness: Float
  "The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors."
  saturation: Float
}

type Color_Hsl_Entity_Mutations {
  delete: [ID!]!
  update(hue: Float, lightness: Float, saturation: Float): [Color_Hsl_Entity!]!
}

"Converts the color in HSV color space to RGB color space"
type Color_HsvToRgb_Entity implements Color_Brightness_Component & Color_Hs_Component & Color_Rgb_Component & Entity {
  _c__color__brightness: ID
  _c__color__hs: ID
  _c__color__rgb: ID
  "Blue"
  blue: Float
  "Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when saturation goes towards 0.0."
  brightness: Float
  "Green"
  green: Float
  "The hue of the color, in degrees. Decides if itâ€™s red, blue, purple, etc."
  hue: Float
  id: ID!
  "Red"
  red: Float
  "The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors."
  saturation: Float
}

type Color_HsvToRgb_Entity_Mutations {
  delete: [ID!]!
  update(blue: Float, brightness: Float, green: Float, hue: Float, red: Float, saturation: Float): [Color_HsvToRgb_Entity!]!
}

"The color in HSV color space (Hue, saturation, value)"
type Color_Hsv_Entity implements Color_Brightness_Component & Color_Hs_Component & Entity {
  _c__color__brightness: ID
  _c__color__hs: ID
  "Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when saturation goes towards 0.0."
  brightness: Float
  "The hue of the color, in degrees. Decides if itâ€™s red, blue, purple, etc."
  hue: Float
  id: ID!
  "The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors."
  saturation: Float
}

type Color_Hsv_Entity_Mutations {
  delete: [ID!]!
  update(brightness: Float, hue: Float, saturation: Float): [Color_Hsv_Entity!]!
}

"Converts the color in RGB color space to HSV color space"
type Color_RgbToHsv_Entity implements Color_Brightness_Component & Color_Hs_Component & Color_Rgb_Component & Entity {
  _c__color__brightness: ID
  _c__color__hs: ID
  _c__color__rgb: ID
  "Blue"
  blue: Float
  "Decides how bright the color will look. 0.0 will be black, and 1.0 will give a bright an clear color that goes towards white when saturation goes towards 0.0."
  brightness: Float
  "Green"
  green: Float
  "The hue of the color, in degrees. Decides if itâ€™s red, blue, purple, etc."
  hue: Float
  id: ID!
  "Red"
  red: Float
  "The colorfulness of the color. 0.0 gives gray scale colors and 1.0 will give absolutely clear colors."
  saturation: Float
}

type Color_RgbToHsv_Entity_Mutations {
  delete: [ID!]!
  update(blue: Float, brightness: Float, green: Float, hue: Float, red: Float, saturation: Float): [Color_RgbToHsv_Entity!]!
}

"The color in RGB color space."
type Color_Rgb_Entity implements Color_Rgb_Component & Entity {
  _c__color__rgb: ID
  "Blue"
  blue: Float
  "Green"
  green: Float
  id: ID!
  "Red"
  red: Float
}

type Color_Rgb_Entity_Mutations {
  delete: [ID!]!
  update(blue: Float, green: Float, red: Float): [Color_Rgb_Entity!]!
}

"The color in RGB color space with the alpha channel."
type Color_Rgba_Entity implements Color_Alpha_Component & Color_Rgb_Component & Entity {
  _c__color__alpha: ID
  _c__color__rgb: ID
  "Transparency component. 0.0 is fully transparent. 1.0 is fully opaque."
  alpha: Float
  "Blue"
  blue: Float
  "Green"
  green: Float
  id: ID!
  "Red"
  red: Float
}

type Color_Rgba_Entity_Mutations {
  delete: [ID!]!
  update(alpha: Float, blue: Float, green: Float, red: Float): [Color_Rgba_Entity!]!
}

"Mutations for entities and relations on the namespace Comparison"
type ComparisonMutations {
  createEquals(id: ID, lhs: JSON!, result: Boolean, rhs: JSON!): Comparison_Equals_Entity!
  createGreaterThan(id: ID, lhs: Float!, result: Boolean, rhs: Float!): Comparison_GreaterThan_Entity!
  createGreaterThanOrEquals(id: ID, lhs: Float!, result: Boolean, rhs: Float!): Comparison_GreaterThanOrEquals_Entity!
  createLowerThan(id: ID, lhs: Float!, result: Boolean, rhs: Float!): Comparison_LowerThan_Entity!
  createLowerThanOrEquals(id: ID, lhs: Float!, result: Boolean, rhs: Float!): Comparison_LowerThanOrEquals_Entity!
  createNotEquals(id: ID, lhs: JSON!, result: Boolean, rhs: JSON!): Comparison_NotEquals_Entity!
  "Checks if lhs is equal to rhs"
  equals(id: ID, ids: [ID!], label: String, lhs: JSON, result: Boolean, rhs: JSON): Comparison_Equals_Entity_Mutations!
  "Checks if lhs is greater than rhs"
  greaterThan(id: ID, ids: [ID!], label: String, lhs: Float, result: Boolean, rhs: Float): Comparison_GreaterThan_Entity_Mutations!
  "Checks if lhs is greater than or equal to rhs"
  greaterThanOrEquals(id: ID, ids: [ID!], label: String, lhs: Float, result: Boolean, rhs: Float): Comparison_GreaterThanOrEquals_Entity_Mutations!
  "Checks if lhs is lower than rhs"
  lowerThan(id: ID, ids: [ID!], label: String, lhs: Float, result: Boolean, rhs: Float): Comparison_LowerThan_Entity_Mutations!
  "Checks if lhs is lower than or equal to rhs"
  lowerThanOrEquals(id: ID, ids: [ID!], label: String, lhs: Float, result: Boolean, rhs: Float): Comparison_LowerThanOrEquals_Entity_Mutations!
  "Checks if lhs not equal to rhs"
  notEquals(id: ID, ids: [ID!], label: String, lhs: JSON, result: Boolean, rhs: JSON): Comparison_NotEquals_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Comparison"
type ComparisonNamespace {
  comparisonGateComponent: [Comparison_ComparisonGate_Component!]!
  comparisonNumericComponent: [Comparison_ComparisonNumeric_Component!]!
  "Checks if lhs is equal to rhs"
  equals(id: String, label: String, lhs: JSON, result: Boolean, rhs: JSON): [Comparison_Equals_Entity!]!
  "Checks if lhs is greater than rhs"
  greaterThan(id: String, label: String, lhs: Float, result: Boolean, rhs: Float): [Comparison_GreaterThan_Entity!]!
  "Checks if lhs is greater than or equal to rhs"
  greaterThanOrEquals(id: String, label: String, lhs: Float, result: Boolean, rhs: Float): [Comparison_GreaterThanOrEquals_Entity!]!
  "Checks if lhs is lower than rhs"
  lowerThan(id: String, label: String, lhs: Float, result: Boolean, rhs: Float): [Comparison_LowerThan_Entity!]!
  "Checks if lhs is lower than or equal to rhs"
  lowerThanOrEquals(id: String, label: String, lhs: Float, result: Boolean, rhs: Float): [Comparison_LowerThanOrEquals_Entity!]!
  "Checks if lhs not equal to rhs"
  notEquals(id: String, label: String, lhs: JSON, result: Boolean, rhs: JSON): [Comparison_NotEquals_Entity!]!
}

"Checks if lhs is equal to rhs"
type Comparison_Equals_Entity implements Comparison_ComparisonGate_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_gate: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: JSON
  "The result"
  result: Boolean
  rhs: JSON
}

type Comparison_Equals_Entity_Mutations {
  delete: [ID!]!
  update(lhs: JSON, rhs: JSON): [Comparison_Equals_Entity!]!
}

"Checks if lhs is greater than or equal to rhs"
type Comparison_GreaterThanOrEquals_Entity implements Comparison_ComparisonNumeric_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_numeric: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: Float
  "The result"
  result: Boolean
  rhs: Float
}

type Comparison_GreaterThanOrEquals_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [Comparison_GreaterThanOrEquals_Entity!]!
}

"Checks if lhs is greater than rhs"
type Comparison_GreaterThan_Entity implements Comparison_ComparisonNumeric_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_numeric: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: Float
  "The result"
  result: Boolean
  rhs: Float
}

type Comparison_GreaterThan_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [Comparison_GreaterThan_Entity!]!
}

"Checks if lhs is lower than or equal to rhs"
type Comparison_LowerThanOrEquals_Entity implements Comparison_ComparisonNumeric_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_numeric: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: Float
  "The result"
  result: Boolean
  rhs: Float
}

type Comparison_LowerThanOrEquals_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [Comparison_LowerThanOrEquals_Entity!]!
}

"Checks if lhs is lower than rhs"
type Comparison_LowerThan_Entity implements Comparison_ComparisonNumeric_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_numeric: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: Float
  "The result"
  result: Boolean
  rhs: Float
}

type Comparison_LowerThan_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, rhs: Float): [Comparison_LowerThan_Entity!]!
}

"Checks if lhs not equal to rhs"
type Comparison_NotEquals_Entity implements Comparison_ComparisonGate_Component & Entity & Result_ResultBoolean_Component {
  _c__comparison__comparison_gate: ID
  _c__result__result_boolean: ID
  id: ID!
  lhs: JSON
  "The result"
  result: Boolean
  rhs: JSON
}

type Comparison_NotEquals_Entity_Mutations {
  delete: [ID!]!
  update(lhs: JSON, rhs: JSON): [Comparison_NotEquals_Entity!]!
}

"Mutations for entities and relations on the namespace Config"
type ConfigMutations {
  "Loads a configuration file"
  configFile(filename: String, id: ID, ids: [ID!], label: String, name: String, result: JSON, trigger: Boolean): Config_ConfigFile_Entity_Mutations!
  createConfigFile(filename: String!, id: ID, name: String!, result: JSON!, trigger: Boolean!): Config_ConfigFile_Entity!
}

"Queries for components, entities and relations on the namespace Config"
type ConfigNamespace {
  "Loads a configuration file"
  configFile(filename: String, id: String, label: String, name: String, result: JSON, trigger: Boolean): [Config_ConfigFile_Entity!]!
  "Loads a configuration file"
  configFileComponent: [Config_ConfigFile_Component!]!
}

"Loads a configuration file"
type Config_ConfigFile_Entity implements Base_Named_Component & Config_ConfigFile_Component & Entity & File_File_Component & Trigger_Action_Component {
  _c__base__named: ID
  _c__config__config_file: ID
  _c__file__file: ID
  _c__trigger__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: JSON
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Config_ConfigFile_Entity_Mutations {
  delete: [ID!]!
  trigger: [Config_ConfigFile_Entity!]!
  update(filename: String, name: String, result: JSON, trigger: Boolean): [Config_ConfigFile_Entity!]!
}

"Mutations for entities and relations on the namespace Connector"
type ConnectorMutations {
  "Connects a property with a other property and buffers the values in a FIFO buffer before propagation"
  bufferedFifoConnector(inboundId: ID, label: String, outboundId: ID): Connector_BufferedFifoConnector_Relation_Mutations!
  createBufferedFifoConnector(buffer: [JSON!]!, buffer_size: Float!, inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_BufferedFifoConnector_Relation!
  createDebounceConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_DebounceConnector_Relation!
  createDebugConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_DebugConnector_Relation!
  createDecrementByConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_DecrementByConnector_Relation!
  createDefaultConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_DefaultConnector_Relation!
  createDelayConnector(delay: Float!, inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_DelayConnector_Relation!
  createIncrementByConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_IncrementByConnector_Relation!
  createNumericInterpolationConnector(buffer: [JSON!]!, buffer_size: Float!, inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_NumericInterpolationConnector_Relation!
  createParseFloatConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_ParseFloatConnector_Relation!
  createParseIntConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_ParseIntConnector_Relation!
  createThreadedConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_ThreadedConnector_Relation!
  createToStringConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_ToStringConnector_Relation!
  createTraceConnector(inboundId: ID, inbound_property_name: String!, instanceId: ID, outboundId: ID, outbound_property_name: String!): Connector_TraceConnector_Relation!
  "Connects a property with a other property and propagates the value if and only if the value is different"
  debounceConnector(inboundId: ID, label: String, outboundId: ID): Connector_DebounceConnector_Relation_Mutations!
  "Connects a property with a other property and logs changes to the debug logger"
  debugConnector(inboundId: ID, label: String, outboundId: ID): Connector_DebugConnector_Relation_Mutations!
  "Connects a outbound property with another property. The value of the outbound property will be subtracted from the value of the inbound property."
  decrementByConnector(inboundId: ID, label: String, outboundId: ID): Connector_DecrementByConnector_Relation_Mutations!
  "Connects a property of an entity instance with a other property of another entity instance"
  defaultConnector(inboundId: ID, label: String, outboundId: ID): Connector_DefaultConnector_Relation_Mutations!
  "Connects a property with a other property after the given milli seconds"
  delayConnector(inboundId: ID, label: String, outboundId: ID): Connector_DelayConnector_Relation_Mutations!
  "Connects a outbound property with another property. The value of the outbound property will be added to the value of the inbound property."
  incrementByConnector(inboundId: ID, label: String, outboundId: ID): Connector_IncrementByConnector_Relation_Mutations!
  "Connects a property with a other property and interpolate the numeric values before propagation"
  numericInterpolationConnector(inboundId: ID, label: String, outboundId: ID): Connector_NumericInterpolationConnector_Relation_Mutations!
  "Connects an string property of an entity instance with a number property of another entity instance. Outgoing string point values gets converted to floating point numbers if possible"
  parseFloatConnector(inboundId: ID, label: String, outboundId: ID): Connector_ParseFloatConnector_Relation_Mutations!
  "Connects an string property of an entity instance with a number property of another entity instance. Outgoing string values gets converted to integer numbers if possible"
  parseIntConnector(inboundId: ID, label: String, outboundId: ID): Connector_ParseIntConnector_Relation_Mutations!
  "Connects a property with a other property. The propagation will run in a new thread"
  threadedConnector(inboundId: ID, label: String, outboundId: ID): Connector_ThreadedConnector_Relation_Mutations!
  "Connects an number property of an entity instance with a string property of another entity instance. Outgoing integer values gets converted to string"
  toStringConnector(inboundId: ID, label: String, outboundId: ID): Connector_ToStringConnector_Relation_Mutations!
  "Connects a property with a other property and logs changes to the trace logger"
  traceConnector(inboundId: ID, label: String, outboundId: ID): Connector_TraceConnector_Relation_Mutations!
}

"Queries for components, entities and relations on the namespace Connector"
type ConnectorNamespace {
  "A buffer of the given size"
  bufferComponent: [Connector_Buffer_Component!]!
  "Connects a property with a other property and buffers the values in a FIFO buffer before propagation"
  bufferedFifoConnector(buffer: [JSON!], buffer_size: Float, inbound_property_name: String, outbound_property_name: String): [Connector_BufferedFifoConnector_Relation!]!
  "Connects a property of an entity instance with a other property of another entity instance"
  connectorComponent: [Connector_Connector_Component!]!
  "Connects a property with a other property and propagates the value if and only if the value is different"
  debounceConnector(inbound_property_name: String, outbound_property_name: String): [Connector_DebounceConnector_Relation!]!
  "Connects a property with a other property and logs changes to the debug logger"
  debugConnector(inbound_property_name: String, outbound_property_name: String): [Connector_DebugConnector_Relation!]!
  "Connects a outbound property with another property. The value of the outbound property will be subtracted from the value of the inbound property."
  decrementByConnector(inbound_property_name: String, outbound_property_name: String): [Connector_DecrementByConnector_Relation!]!
  "Connects a property of an entity instance with a other property of another entity instance"
  defaultConnector(inbound_property_name: String, outbound_property_name: String): [Connector_DefaultConnector_Relation!]!
  "Connects a property with a other property after the given milli seconds"
  delayConnector(delay: Float, inbound_property_name: String, outbound_property_name: String): [Connector_DelayConnector_Relation!]!
  "Connects a outbound property with another property. The value of the outbound property will be added to the value of the inbound property."
  incrementByConnector(inbound_property_name: String, outbound_property_name: String): [Connector_IncrementByConnector_Relation!]!
  "Connects a property with a other property and interpolate the numeric values before propagation"
  numericInterpolationConnector(buffer: [JSON!], buffer_size: Float, inbound_property_name: String, outbound_property_name: String): [Connector_NumericInterpolationConnector_Relation!]!
  "Connects an string property of an entity instance with a number property of another entity instance. Outgoing string point values gets converted to floating point numbers if possible"
  parseFloatConnector(inbound_property_name: String, outbound_property_name: String): [Connector_ParseFloatConnector_Relation!]!
  "Connects an string property of an entity instance with a number property of another entity instance. Outgoing string values gets converted to integer numbers if possible"
  parseIntConnector(inbound_property_name: String, outbound_property_name: String): [Connector_ParseIntConnector_Relation!]!
  "Counts the number of propagations"
  propagationCounterComponent: [Connector_PropagationCounter_Component!]!
  "Connects a property with a other property. The propagation will run in a new thread"
  threadedConnector(inbound_property_name: String, outbound_property_name: String): [Connector_ThreadedConnector_Relation!]!
  "Connects an number property of an entity instance with a string property of another entity instance. Outgoing integer values gets converted to string"
  toStringConnector(inbound_property_name: String, outbound_property_name: String): [Connector_ToStringConnector_Relation!]!
  "Connects a property with a other property and logs changes to the trace logger"
  traceConnector(inbound_property_name: String, outbound_property_name: String): [Connector_TraceConnector_Relation!]!
}

"Connects a property with a other property and buffers the values in a FIFO buffer before propagation"
type Connector_BufferedFifoConnector_Relation implements Connector_Buffer_Component & Connector_Connector_Component & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: JSON
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_BufferedFifoConnector_Relation_Mutations {
  delete: [ID!]!
  update(buffer: [JSON!], buffer_size: Float, inbound_property_name: String, outbound_property_name: String): [Connector_BufferedFifoConnector_Relation!]!
}

"Connects a property with a other property and propagates the value if and only if the value is different"
type Connector_DebounceConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_DebounceConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_DebounceConnector_Relation!]!
}

"Connects a property with a other property and logs changes to the debug logger"
type Connector_DebugConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_DebugConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_DebugConnector_Relation!]!
}

"Connects a outbound property with another property. The value of the outbound property will be subtracted from the value of the inbound property."
type Connector_DecrementByConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_DecrementByConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_DecrementByConnector_Relation!]!
}

"Connects a property of an entity instance with a other property of another entity instance"
type Connector_DefaultConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_DefaultConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_DefaultConnector_Relation!]!
}

"Connects a property with a other property after the given milli seconds"
type Connector_DelayConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  "The delay in milli seconds"
  delay: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_DelayConnector_Relation_Mutations {
  delete: [ID!]!
  update(delay: Float, inbound_property_name: String, outbound_property_name: String): [Connector_DelayConnector_Relation!]!
}

"Connects a outbound property with another property. The value of the outbound property will be added to the value of the inbound property."
type Connector_IncrementByConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_IncrementByConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_IncrementByConnector_Relation!]!
}

"Connects a property with a other property and interpolate the numeric values before propagation"
type Connector_NumericInterpolationConnector_Relation implements Connector_Buffer_Component & Connector_Connector_Component & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: JSON
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_NumericInterpolationConnector_Relation_Mutations {
  delete: [ID!]!
  update(buffer: [JSON!], buffer_size: Float, inbound_property_name: String, outbound_property_name: String): [Connector_NumericInterpolationConnector_Relation!]!
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string point values gets converted to floating point numbers if possible"
type Connector_ParseFloatConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_ParseFloatConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_ParseFloatConnector_Relation!]!
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string values gets converted to integer numbers if possible"
type Connector_ParseIntConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_ParseIntConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_ParseIntConnector_Relation!]!
}

"Connects a property with a other property. The propagation will run in a new thread"
type Connector_ThreadedConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_ThreadedConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_ThreadedConnector_Relation!]!
}

"Connects an number property of an entity instance with a string property of another entity instance. Outgoing integer values gets converted to string"
type Connector_ToStringConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_ToStringConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_ToStringConnector_Relation!]!
}

"Connects a property with a other property and logs changes to the trace logger"
type Connector_TraceConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type Connector_TraceConnector_Relation_Mutations {
  delete: [ID!]!
  update(inbound_property_name: String, outbound_property_name: String): [Connector_TraceConnector_Relation!]!
}

"Mutations for entities and relations on the namespace Core"
type CoreMutations {
  createShutdown(id: ID, label: String!, shutdown: Boolean!, trigger: Boolean!): Core_Shutdown_Entity!
  createSystemEvent(event: JSON, id: ID, label: String!): Core_SystemEvent_Entity!
  shutdown(id: ID, ids: [ID!], label: String, shutdown: Boolean, trigger: Boolean): Core_Shutdown_Entity_Mutations!
  "Events of the type system"
  systemEvent(event: JSON, id: ID, ids: [ID!], label: String): Core_SystemEvent_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Core"
type CoreNamespace {
  "This components spawns events."
  eventComponent: [Core_Event_Component!]!
  "The label is an hierarchical path with static segments, named parameters and catch-all parameters."
  labeledComponent: [Core_Labeled_Component!]!
  shutdown(id: String, label: String, shutdown: Boolean, trigger: Boolean): [Core_Shutdown_Entity!]!
  "Events of the type system"
  systemEvent(event: JSON, id: String, label: String): [Core_SystemEvent_Entity!]!
}

type Core_Shutdown_Entity implements Core_Labeled_Component & Entity & Trigger_Action_Component {
  _c__core__labeled: ID
  _c__trigger__action: ID
  id: ID!
  label: String
  shutdown: Boolean
  trigger: Boolean
}

type Core_Shutdown_Entity_Mutations {
  delete: [ID!]!
  trigger: [Core_Shutdown_Entity!]!
  update(label: String, shutdown: Boolean, trigger: Boolean): [Core_Shutdown_Entity!]!
}

"Events of the type system"
type Core_SystemEvent_Entity implements Core_Event_Component & Core_Labeled_Component & Entity {
  _c__core__event: ID
  _c__core__labeled: ID
  event: JSON
  id: ID!
  label: String
}

type Core_SystemEvent_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [Core_SystemEvent_Entity!]!
}

"Mutations for entities and relations on the namespace DateTime"
type DateTimeMutations {
  createDay(day_of_month: Float, id: ID, iso8601: String, label: String!): DateTime_Day_Entity!
  createDayOfMonth(day_of_month: Float, inboundId: ID, instanceId: ID, outboundId: ID): DateTime_DayOfMonth_Relation!
  createFirstDay(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_FirstDay_Relation!
  createFirstMonth(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_FirstMonth_Relation!
  createHour(hour_of_day: Float, id: ID, label: String!): DateTime_Hour_Entity!
  createLastDay(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_LastDay_Relation!
  createLastMonth(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_LastMonth_Relation!
  createMinute(id: ID, label: String!, minute: Float): DateTime_Minute_Entity!
  createMonth(id: ID, label: String!, month_and_year: String, month_of_year: Float): DateTime_Month_Entity!
  createMonthOfYear(inboundId: ID, instanceId: ID, month_of_year: Float, outboundId: ID): DateTime_MonthOfYear_Relation!
  createNextDay(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_NextDay_Relation!
  createNextMonth(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_NextMonth_Relation!
  createNextYear(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_NextYear_Relation!
  createThisMonthInNextYear(inboundId: ID, instanceId: ID, outboundId: ID): DateTime_ThisMonthInNextYear_Relation!
  createUtcNow(id: ID, result: String, trigger: Boolean!): DateTime_UtcNow_Entity!
  createUtcTimestamp(id: ID, result: Float, trigger: Boolean!): DateTime_UtcTimestamp_Entity!
  createYear(id: ID, label: String!, leap: Boolean, year: Float): DateTime_Year_Entity!
  "Represents a day in the time graph"
  day(day_of_month: Float, id: ID, ids: [ID!], iso8601: String, label: String): DateTime_Day_Entity_Mutations!
  "Day of the month"
  dayOfMonth(inboundId: ID, label: String, outboundId: ID): DateTime_DayOfMonth_Relation_Mutations!
  "The first day of the month"
  firstDay(inboundId: ID, label: String, outboundId: ID): DateTime_FirstDay_Relation_Mutations!
  "The first month of the year"
  firstMonth(inboundId: ID, label: String, outboundId: ID): DateTime_FirstMonth_Relation_Mutations!
  "Represents an hour in the time graph"
  hour(hour_of_day: Float, id: ID, ids: [ID!], label: String): DateTime_Hour_Entity_Mutations!
  "The last day of the month"
  lastDay(inboundId: ID, label: String, outboundId: ID): DateTime_LastDay_Relation_Mutations!
  "The last month of the year"
  lastMonth(inboundId: ID, label: String, outboundId: ID): DateTime_LastMonth_Relation_Mutations!
  "Represents a minute in the time graph"
  minute(id: ID, ids: [ID!], label: String, minute: Float): DateTime_Minute_Entity_Mutations!
  "Represents a month in the time graph"
  month(id: ID, ids: [ID!], label: String, month_and_year: String, month_of_year: Float): DateTime_Month_Entity_Mutations!
  "Month of the year"
  monthOfYear(inboundId: ID, label: String, outboundId: ID): DateTime_MonthOfYear_Relation_Mutations!
  "The next day."
  nextDay(inboundId: ID, label: String, outboundId: ID): DateTime_NextDay_Relation_Mutations!
  "The next month."
  nextMonth(inboundId: ID, label: String, outboundId: ID): DateTime_NextMonth_Relation_Mutations!
  "The next year."
  nextYear(inboundId: ID, label: String, outboundId: ID): DateTime_NextYear_Relation_Mutations!
  "This month in the next year."
  thisMonthInNextYear(inboundId: ID, label: String, outboundId: ID): DateTime_ThisMonthInNextYear_Relation_Mutations!
  "Returns the current date as ISO8601"
  utcNow(id: ID, ids: [ID!], label: String, result: String, trigger: Boolean): DateTime_UtcNow_Entity_Mutations!
  "Returns the current timestamp"
  utcTimestamp(id: ID, ids: [ID!], label: String, result: Float, trigger: Boolean): DateTime_UtcTimestamp_Entity_Mutations!
  "Represents a year in the time graph"
  year(id: ID, ids: [ID!], label: String, leap: Boolean, year: Float): DateTime_Year_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace DateTime"
type DateTimeNamespace {
  "Represents a day in the time graph"
  day(day_of_month: Float, id: String, iso8601: String, label: String): [DateTime_Day_Entity!]!
  "Day of the month"
  dayOfMonth(day_of_month: Float): [DateTime_DayOfMonth_Relation!]!
  "The first day of the month"
  firstDay: [DateTime_FirstDay_Relation!]!
  "The first month of the year"
  firstMonth: [DateTime_FirstMonth_Relation!]!
  "Represents an hour in the time graph"
  hour(hour_of_day: Float, id: String, label: String): [DateTime_Hour_Entity!]!
  "The last day of the month"
  lastDay: [DateTime_LastDay_Relation!]!
  "The last month of the year"
  lastMonth: [DateTime_LastMonth_Relation!]!
  "Represents a minute in the time graph"
  minute(id: String, label: String, minute: Float): [DateTime_Minute_Entity!]!
  "Represents a month in the time graph"
  month(id: String, label: String, month_and_year: String, month_of_year: Float): [DateTime_Month_Entity!]!
  "Month of the year"
  monthOfYear(month_of_year: Float): [DateTime_MonthOfYear_Relation!]!
  "The next day."
  nextDay: [DateTime_NextDay_Relation!]!
  "The next month."
  nextMonth: [DateTime_NextMonth_Relation!]!
  "The next year."
  nextYear: [DateTime_NextYear_Relation!]!
  "This month in the next year."
  thisMonthInNextYear: [DateTime_ThisMonthInNextYear_Relation!]!
  "Returns the current date as ISO8601"
  utcNow(id: String, label: String, result: String, trigger: Boolean): [DateTime_UtcNow_Entity!]!
  "Returns the current timestamp"
  utcTimestamp(id: String, label: String, result: Float, trigger: Boolean): [DateTime_UtcTimestamp_Entity!]!
  "Represents a year in the time graph"
  year(id: String, label: String, leap: Boolean, year: Float): [DateTime_Year_Entity!]!
}

"Day of the month"
type DateTime_DayOfMonth_Relation implements Relation {
  "The day."
  day: DateTime_Day_Entity!
  "The nth day of the month."
  day_of_month: Float
  instance_id: ID!
  key: ID!
  "The month."
  month: DateTime_Month_Entity!
}

type DateTime_DayOfMonth_Relation_Mutations {
  delete: [ID!]!
}

"Represents a day in the time graph"
type DateTime_Day_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  "The nth day of the month"
  day_of_month: Float
  id: ID!
  "ISO8601 representation of the day"
  iso8601: String
  label: String
  "The month."
  month: [DateTime_Month_Entity!]!
  "The next day."
  next_day: [DateTime_Day_Entity!]!
  "The previous day."
  previous_day: [DateTime_Day_Entity!]!
}

type DateTime_Day_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [DateTime_Day_Entity!]!
}

"The first day of the month"
type DateTime_FirstDay_Relation implements Relation {
  "The first day of the month."
  first_day: DateTime_Day_Entity!
  instance_id: ID!
  key: ID!
  "The month."
  month: DateTime_Month_Entity!
}

type DateTime_FirstDay_Relation_Mutations {
  delete: [ID!]!
}

"The first month of the year"
type DateTime_FirstMonth_Relation implements Relation {
  "The first month of the year."
  first_month: DateTime_Month_Entity!
  instance_id: ID!
  key: ID!
  "The year."
  year: DateTime_Year_Entity!
}

type DateTime_FirstMonth_Relation_Mutations {
  delete: [ID!]!
}

"Represents an hour in the time graph"
type DateTime_Hour_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  "The nth hour of the day"
  hour_of_day: Float
  id: ID!
  label: String
}

type DateTime_Hour_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [DateTime_Hour_Entity!]!
}

"The last day of the month"
type DateTime_LastDay_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The last day of the month."
  last_day: DateTime_Day_Entity!
  "The month."
  month: DateTime_Month_Entity!
}

type DateTime_LastDay_Relation_Mutations {
  delete: [ID!]!
}

"The last month of the year"
type DateTime_LastMonth_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The last month of the year."
  last_month: DateTime_Month_Entity!
  "The year."
  year: DateTime_Year_Entity!
}

type DateTime_LastMonth_Relation_Mutations {
  delete: [ID!]!
}

"Represents a minute in the time graph"
type DateTime_Minute_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  id: ID!
  label: String
  "The nth minute of the hour"
  minute: Float
}

type DateTime_Minute_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [DateTime_Minute_Entity!]!
}

"Month of the year"
type DateTime_MonthOfYear_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The month."
  month: DateTime_Month_Entity!
  "The nth month of the year."
  month_of_year: Float
  "The year."
  year: DateTime_Year_Entity!
}

type DateTime_MonthOfYear_Relation_Mutations {
  delete: [ID!]!
}

"Represents a month in the time graph"
type DateTime_Month_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  "The days of this month."
  days: [DateTime_Day_Entity!]!
  "Relates the month with the days."
  days_of_month: [DateTime_DayOfMonth_Relation!]!
  "The first day of the month."
  first_day: [DateTime_Day_Entity!]!
  id: ID!
  label: String
  "The last day of the month."
  last_day: [DateTime_Day_Entity!]!
  "String representation of the month and year"
  month_and_year: String
  "This month in next year."
  month_in_next_year: [DateTime_Month_Entity!]!
  "This month in previous year."
  month_in_previous_year: [DateTime_Month_Entity!]!
  "The nth month of a year"
  month_of_year: Float
  "The next month."
  next_month: [DateTime_Month_Entity!]!
  "The previous month."
  previous_month: [DateTime_Month_Entity!]!
  "The year."
  year: [DateTime_Year_Entity!]!
}

type DateTime_Month_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [DateTime_Month_Entity!]!
}

"The next day."
type DateTime_NextDay_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The next day."
  next_day: DateTime_Day_Entity!
  "The previous day."
  previous_day: DateTime_Day_Entity!
}

type DateTime_NextDay_Relation_Mutations {
  delete: [ID!]!
}

"The next month."
type DateTime_NextMonth_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The next month."
  next_month: DateTime_Month_Entity!
  "The previous month."
  previous_month: DateTime_Month_Entity!
}

type DateTime_NextMonth_Relation_Mutations {
  delete: [ID!]!
}

"The next year."
type DateTime_NextYear_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "The next year."
  next_year: DateTime_Year_Entity!
  "The previous year."
  previous_year: DateTime_Year_Entity!
}

type DateTime_NextYear_Relation_Mutations {
  delete: [ID!]!
}

"This month in the next year."
type DateTime_ThisMonthInNextYear_Relation implements Relation {
  instance_id: ID!
  key: ID!
  "This month in next year."
  month_in_next_year: DateTime_Month_Entity!
  "This month in previous year."
  month_in_previous_year: DateTime_Month_Entity!
}

type DateTime_ThisMonthInNextYear_Relation_Mutations {
  delete: [ID!]!
}

"Returns the current date as ISO8601"
type DateTime_UtcNow_Entity implements Entity & Result_ResultString_Component & Trigger_Action_Component {
  _c__result__result_string: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type DateTime_UtcNow_Entity_Mutations {
  delete: [ID!]!
  trigger: [DateTime_UtcNow_Entity!]!
  update(trigger: Boolean): [DateTime_UtcNow_Entity!]!
}

"Returns the current timestamp"
type DateTime_UtcTimestamp_Entity implements Entity & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type DateTime_UtcTimestamp_Entity_Mutations {
  delete: [ID!]!
  trigger: [DateTime_UtcTimestamp_Entity!]!
  update(trigger: Boolean): [DateTime_UtcTimestamp_Entity!]!
}

"Represents a year in the time graph"
type DateTime_Year_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  "The first month of the year."
  first_month: [DateTime_Month_Entity!]!
  id: ID!
  label: String
  "The last month of the year."
  last_month: [DateTime_Month_Entity!]!
  "True, if the year is a leap year"
  leap: Boolean
  "The months of this year."
  months: [DateTime_Month_Entity!]!
  "Relates the year with the months."
  months_of_year: [DateTime_MonthOfYear_Relation!]!
  "The next year."
  next_year: [DateTime_Year_Entity!]!
  "The previous year."
  previous_year: [DateTime_Year_Entity!]!
  "A year"
  year: Float
}

type DateTime_Year_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [DateTime_Year_Entity!]!
}

"Queries for components, entities and relations on the namespace File"
type FileNamespace {
  "Represents a file in the file system"
  fileComponent: [File_File_Component!]!
  "Triggers if the file with the given filename has been changed"
  fsNotifyComponent: [File_FsNotify_Component!]!
}

"Mutations for entities and relations on the namespace Flow"
type FlowMutations {
  "A simple comment"
  comment(description: String, id: ID, ids: [ID!], label: String, name: String): Flow_Comment_Entity_Mutations!
  createComment(description: String!, id: ID, name: String!): Flow_Comment_Entity!
  createGenericFlow(id: ID, label: String!): Flow_GenericFlow_Entity!
  "Generic flow without inputs and outputs"
  genericFlow(id: ID, ids: [ID!], label: String): Flow_GenericFlow_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Flow"
type FlowNamespace {
  "A simple comment"
  comment(description: String, id: String, label: String, name: String): [Flow_Comment_Entity!]!
  "Generic flow without inputs and outputs"
  genericFlow(id: String, label: String): [Flow_GenericFlow_Entity!]!
}

"A simple comment"
type Flow_Comment_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The name of an entity or a relation"
  name: String
}

type Flow_Comment_Entity_Mutations {
  delete: [ID!]!
  update(description: String, name: String): [Flow_Comment_Entity!]!
}

"Generic flow without inputs and outputs"
type Flow_GenericFlow_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  id: ID!
  label: String
}

type Flow_GenericFlow_Entity_Mutations {
  delete: [ID!]!
  update(label: String): [Flow_GenericFlow_Entity!]!
}

"Mutations for entities and relations on the namespace Git"
type GitMutations {
  createRepository(branch: String!, description: String!, fast_forward: Boolean!, fetch: Boolean!, filename: String!, id: ID, merge_from: String!, name: String!, push: Boolean!, remote_branch: String!, remote_name: String!, trigger: Boolean!, url: String!): Git_Repository_Entity!
  "Git repository"
  repository(branch: String, description: String, fast_forward: Boolean, fetch: Boolean, filename: String, id: ID, ids: [ID!], label: String, merge_from: String, name: String, push: Boolean, remote_branch: String, remote_name: String, trigger: Boolean, url: String): Git_Repository_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Git"
type GitNamespace {
  "Git repository"
  repository(branch: String, description: String, fast_forward: Boolean, fetch: Boolean, filename: String, id: String, label: String, merge_from: String, name: String, push: Boolean, remote_branch: String, remote_name: String, trigger: Boolean, url: String): [Git_Repository_Entity!]!
  "Git repository"
  repositoryComponent: [Git_Repository_Component!]!
  "The transfer progress"
  transferProgressComponent: [Git_TransferProgress_Component!]!
}

"Git repository"
type Git_Repository_Entity implements Base_Describable_Component & Base_Named_Component & Entity & File_File_Component & Git_Repository_Component & Http_Url_Component & Trigger_Action_Component {
  _c__base__describable: ID
  _c__base__named: ID
  _c__file__file: ID
  _c__git__repository: ID
  _c__http__url: ID
  _c__trigger__action: ID
  "The current branch name."
  branch: String
  "The description of an entity or a relation"
  description: String
  "Fast forward"
  fast_forward: Boolean
  "Fetches the remotes"
  fetch: Boolean
  "The filename"
  filename: String
  id: ID!
  "Merges the given local branch into the current branch"
  merge_from: String
  "The name of an entity or a relation"
  name: String
  "Pushes the current branch to the remote"
  push: Boolean
  "The branch of the remote repository."
  remote_branch: String
  "The name of the remote repository."
  remote_name: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  "Uniform Resource Locator"
  url: String
}

type Git_Repository_Entity_Mutations {
  delete: [ID!]!
  trigger: [Git_Repository_Entity!]!
  update(branch: String, description: String, fast_forward: Boolean, fetch: Boolean, filename: String, merge_from: String, name: String, push: Boolean, remote_branch: String, remote_name: String, trigger: Boolean, url: String): [Git_Repository_Entity!]!
}

"Mutations for entities and relations on the namespace Http"
type HttpMutations {
  createHttp(id: ID, method: String!, payload: JSON!, request_headers: JSON!, response_headers: JSON, result: JSON, status: Float, trigger: Boolean!, url: String!): Http_Http_Entity!
  createJsonRpc(error: JSON, id: ID, json_rpc_version: String!, method: String!, params: JSON!, result: JSON, trigger: Boolean!, url: String!): Http_JsonRpc_Entity!
  "Sends HTTP request to a given URL and returns the result object"
  http(id: ID, ids: [ID!], label: String, method: String, payload: JSON, request_headers: JSON, response_headers: JSON, result: JSON, status: Float, trigger: Boolean, url: String): Http_Http_Entity_Mutations!
  "Sends JSON-RPC request to a given URL and returns the result object"
  jsonRpc(error: JSON, id: ID, ids: [ID!], json_rpc_version: String, label: String, method: String, params: JSON, result: JSON, trigger: Boolean, url: String): Http_JsonRpc_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Http"
type HttpNamespace {
  "Sends HTTP request to a given URL and returns the result object"
  http(id: String, label: String, method: String, payload: JSON, request_headers: JSON, response_headers: JSON, result: JSON, status: Float, trigger: Boolean, url: String): [Http_Http_Entity!]!
  "Sends HTTP request to a given URL"
  httpComponent: [Http_Http_Component!]!
  "Sends JSON-RPC request to a given URL and returns the result object"
  jsonRpc(error: JSON, id: String, json_rpc_version: String, label: String, method: String, params: JSON, result: JSON, trigger: Boolean, url: String): [Http_JsonRpc_Entity!]!
  "Sends JSON-RPC request to a given URL"
  jsonRpcComponent: [Http_JsonRpc_Component!]!
  "A HTTP request"
  requestComponent: [Http_Request_Component!]!
  "A HTTP response"
  responseComponent: [Http_Response_Component!]!
  "A Uniform Resource Locator (URL), colloquially termed as a web address, is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it."
  urlComponent: [Http_Url_Component!]!
}

"Sends HTTP request to a given URL and returns the result object"
type Http_Http_Entity implements Entity & Http_Http_Component & Http_Request_Component & Http_Response_Component & Http_Url_Component & Result_ResultObject_Component & Trigger_Action_Component {
  _c__http__http: ID
  _c__http__request: ID
  _c__http__response: ID
  _c__http__url: ID
  _c__result__result_object: ID
  _c__trigger__action: ID
  id: ID!
  "The HTTP request method"
  method: String
  "The HTTP request payload"
  payload: JSON
  "The HTTP request headers"
  request_headers: JSON
  "The HTTP response headers"
  response_headers: JSON
  "The result"
  result: JSON
  "The HTTP response status code"
  status: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  "Uniform Resource Locator"
  url: String
}

type Http_Http_Entity_Mutations {
  delete: [ID!]!
  trigger: [Http_Http_Entity!]!
  update(method: String, payload: JSON, request_headers: JSON, trigger: Boolean, url: String): [Http_Http_Entity!]!
}

"Sends JSON-RPC request to a given URL and returns the result object"
type Http_JsonRpc_Entity implements Entity & Http_JsonRpc_Component & Http_Url_Component & Result_ResultObject_Component & Trigger_Action_Component {
  _c__http__json_rpc: ID
  _c__http__url: ID
  _c__result__result_object: ID
  _c__trigger__action: ID
  error: JSON
  id: ID!
  json_rpc_version: String
  method: String
  params: JSON
  result: JSON
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  "Uniform Resource Locator"
  url: String
}

type Http_JsonRpc_Entity_Mutations {
  delete: [ID!]!
  trigger: [Http_JsonRpc_Entity!]!
  update(json_rpc_version: String, method: String, params: JSON, trigger: Boolean, url: String): [Http_JsonRpc_Entity!]!
}

"Mutations for entities and relations on the namespace Json"
type JsonMutations {
  "Array Contains"
  arrayContains(array: [JSON!], id: ID, ids: [ID!], label: String, name: String, result: Boolean, search: JSON): Json_ArrayContains_Entity_Mutations!
  "Array Get By Index"
  arrayGetByIndex(array: [JSON!], id: ID, ids: [ID!], index: Float, label: String, name: String, result: JSON): Json_ArrayGetByIndex_Entity_Mutations!
  "Array Length"
  arrayLength(array: [JSON!], id: ID, ids: [ID!], label: String, length: Float, name: String): Json_ArrayLength_Entity_Mutations!
  "Array Pop"
  arrayPop(array: [JSON!], id: ID, ids: [ID!], label: String, name: String, result: [JSON!], value: JSON): Json_ArrayPop_Entity_Mutations!
  "Array Push"
  arrayPush(array: [JSON!], id: ID, ids: [ID!], label: String, name: String, result: [JSON!], value: JSON): Json_ArrayPush_Entity_Mutations!
  "Array Reverse"
  arrayReverse(array: [JSON!], id: ID, ids: [ID!], label: String, name: String, result: [JSON!]): Json_ArrayReverse_Entity_Mutations!
  createArrayContains(array: [JSON!]!, id: ID, name: String!, result: Boolean, search: JSON!): Json_ArrayContains_Entity!
  createArrayGetByIndex(array: [JSON!]!, id: ID, index: Float!, name: String!, result: JSON): Json_ArrayGetByIndex_Entity!
  createArrayLength(array: [JSON!]!, id: ID, length: Float, name: String!): Json_ArrayLength_Entity!
  createArrayPop(array: [JSON!]!, id: ID, name: String!, result: [JSON!], value: JSON): Json_ArrayPop_Entity!
  createArrayPush(array: [JSON!]!, id: ID, name: String!, result: [JSON!], value: JSON!): Json_ArrayPush_Entity!
  createArrayReverse(array: [JSON!]!, id: ID, name: String!, result: [JSON!]): Json_ArrayReverse_Entity!
  createLoadJson(filename: String!, id: ID, name: String!, result: JSON, trigger: Boolean!): Json_LoadJson_Entity!
  createObjectGetProperty(id: ID, name: String!, object: JSON!, property_name: String!, result: JSON): Json_ObjectGetProperty_Entity!
  createObjectKeys(id: ID, keys: [JSON!], name: String!, object: JSON!): Json_ObjectKeys_Entity!
  createObjectRemoveProperty(id: ID, name: String!, object: JSON!, property_name: String!, result: JSON): Json_ObjectRemoveProperty_Entity!
  createObjectSetProperty(id: ID, name: String!, object: JSON!, property_name: String!, result: JSON, value: JSON!): Json_ObjectSetProperty_Entity!
  createSaveJson(filename: String!, id: ID, name: String!, payload: JSON!, trigger: Boolean!): Json_SaveJson_Entity!
  "Loads a JSON file"
  loadJson(filename: String, id: ID, ids: [ID!], label: String, name: String, result: JSON, trigger: Boolean): Json_LoadJson_Entity_Mutations!
  "Object Get Property"
  objectGetProperty(id: ID, ids: [ID!], label: String, name: String, object: JSON, property_name: String, result: JSON): Json_ObjectGetProperty_Entity_Mutations!
  "Object Keys"
  objectKeys(id: ID, ids: [ID!], keys: [JSON!], label: String, name: String, object: JSON): Json_ObjectKeys_Entity_Mutations!
  "Object Remove Property"
  objectRemoveProperty(id: ID, ids: [ID!], label: String, name: String, object: JSON, property_name: String, result: JSON): Json_ObjectRemoveProperty_Entity_Mutations!
  "Object Set Property"
  objectSetProperty(id: ID, ids: [ID!], label: String, name: String, object: JSON, property_name: String, result: JSON, value: JSON): Json_ObjectSetProperty_Entity_Mutations!
  "Saves an object as JSON file"
  saveJson(filename: String, id: ID, ids: [ID!], label: String, name: String, payload: JSON, trigger: Boolean): Json_SaveJson_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Json"
type JsonNamespace {
  "Array Contains"
  arrayContains(array: [JSON!], id: String, label: String, name: String, result: Boolean, search: JSON): [Json_ArrayContains_Entity!]!
  "Array Get By Index"
  arrayGetByIndex(array: [JSON!], id: String, index: Float, label: String, name: String, result: JSON): [Json_ArrayGetByIndex_Entity!]!
  "Array Length"
  arrayLength(array: [JSON!], id: String, label: String, length: Float, name: String): [Json_ArrayLength_Entity!]!
  "Array Pop"
  arrayPop(array: [JSON!], id: String, label: String, name: String, result: [JSON!], value: JSON): [Json_ArrayPop_Entity!]!
  "Array Push"
  arrayPush(array: [JSON!], id: String, label: String, name: String, result: [JSON!], value: JSON): [Json_ArrayPush_Entity!]!
  "Array Reverse"
  arrayReverse(array: [JSON!], id: String, label: String, name: String, result: [JSON!]): [Json_ArrayReverse_Entity!]!
  "Loads a JSON file"
  loadJson(filename: String, id: String, label: String, name: String, result: JSON, trigger: Boolean): [Json_LoadJson_Entity!]!
  "Loads a JSON file"
  loadJsonComponent: [Json_LoadJson_Component!]!
  "Object Get Property"
  objectGetProperty(id: String, label: String, name: String, object: JSON, property_name: String, result: JSON): [Json_ObjectGetProperty_Entity!]!
  "Object Keys"
  objectKeys(id: String, keys: [JSON!], label: String, name: String, object: JSON): [Json_ObjectKeys_Entity!]!
  "Object Remove Property"
  objectRemoveProperty(id: String, label: String, name: String, object: JSON, property_name: String, result: JSON): [Json_ObjectRemoveProperty_Entity!]!
  "Object Set Property"
  objectSetProperty(id: String, label: String, name: String, object: JSON, property_name: String, result: JSON, value: JSON): [Json_ObjectSetProperty_Entity!]!
  "Saves an object as JSON file"
  saveJson(filename: String, id: String, label: String, name: String, payload: JSON, trigger: Boolean): [Json_SaveJson_Entity!]!
  "Saves an object as JSON file"
  saveJsonComponent: [Json_SaveJson_Component!]!
}

"Array Contains"
type Json_ArrayContains_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: Boolean
  search: JSON
}

type Json_ArrayContains_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], name: String, search: JSON): [Json_ArrayContains_Entity!]!
}

"Array Get By Index"
type Json_ArrayGetByIndex_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  index: Float
  "The name of an entity or a relation"
  name: String
  result: JSON
}

type Json_ArrayGetByIndex_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], index: Float, name: String): [Json_ArrayGetByIndex_Entity!]!
}

"Array Length"
type Json_ArrayLength_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  length: Float
  "The name of an entity or a relation"
  name: String
}

type Json_ArrayLength_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], name: String): [Json_ArrayLength_Entity!]!
}

"Array Pop"
type Json_ArrayPop_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: JSON
  value: JSON
}

type Json_ArrayPop_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], name: String): [Json_ArrayPop_Entity!]!
}

"Array Push"
type Json_ArrayPush_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: JSON
  value: JSON
}

type Json_ArrayPush_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], name: String, value: JSON): [Json_ArrayPush_Entity!]!
}

"Array Reverse"
type Json_ArrayReverse_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: JSON
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: JSON
}

type Json_ArrayReverse_Entity_Mutations {
  delete: [ID!]!
  update(array: [JSON!], name: String): [Json_ArrayReverse_Entity!]!
}

"Loads a JSON file"
type Json_LoadJson_Entity implements Base_Named_Component & Entity & File_File_Component & Json_LoadJson_Component & Result_ResultAny_Component & Trigger_Action_Component {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__load_json: ID
  _c__result__result_any: ID
  _c__trigger__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: JSON
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Json_LoadJson_Entity_Mutations {
  delete: [ID!]!
  trigger: [Json_LoadJson_Entity!]!
  update(filename: String, name: String, trigger: Boolean): [Json_LoadJson_Entity!]!
}

"Object Get Property"
type Json_ObjectGetProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: JSON
  property_name: String
  result: JSON
}

type Json_ObjectGetProperty_Entity_Mutations {
  delete: [ID!]!
  update(name: String, object: JSON, property_name: String): [Json_ObjectGetProperty_Entity!]!
}

"Object Keys"
type Json_ObjectKeys_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  keys: JSON
  "The name of an entity or a relation"
  name: String
  object: JSON
}

type Json_ObjectKeys_Entity_Mutations {
  delete: [ID!]!
  update(name: String, object: JSON): [Json_ObjectKeys_Entity!]!
}

"Object Remove Property"
type Json_ObjectRemoveProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: JSON
  property_name: String
  result: JSON
}

type Json_ObjectRemoveProperty_Entity_Mutations {
  delete: [ID!]!
  update(name: String, object: JSON, property_name: String): [Json_ObjectRemoveProperty_Entity!]!
}

"Object Set Property"
type Json_ObjectSetProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: JSON
  property_name: String
  result: JSON
  value: JSON
}

type Json_ObjectSetProperty_Entity_Mutations {
  delete: [ID!]!
  update(name: String, object: JSON, property_name: String, value: JSON): [Json_ObjectSetProperty_Entity!]!
}

"Saves an object as JSON file"
type Json_SaveJson_Entity implements Base_Named_Component & Entity & File_File_Component & Json_SaveJson_Component & Trigger_Action_Component {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__save_json: ID
  _c__trigger__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  payload: JSON
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Json_SaveJson_Entity_Mutations {
  delete: [ID!]!
  trigger: [Json_SaveJson_Entity!]!
  update(filename: String, name: String, payload: JSON, trigger: Boolean): [Json_SaveJson_Entity!]!
}

"Mutations for entities and relations on the namespace Logical"
type LogicalMutations {
  "AND"
  and(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_And_Entity_Mutations!
  "An AND Gate with three inputs"
  and3(id: ID, ids: [ID!], input1: Boolean, input2: Boolean, input3: Boolean, label: String, result: Boolean): Logical_And3_Entity_Mutations!
  createAnd(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_And_Entity!
  createAnd3(id: ID, input1: Boolean!, input2: Boolean!, input3: Boolean!, result: Boolean): Logical_And3_Entity!
  createIfThenElse(condition: Boolean!, else_payload: JSON!, id: ID, result: JSON, then_payload: JSON!): Logical_IfThenElse_Entity!
  createNand(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_Nand_Entity!
  createNor(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_Nor_Entity!
  createNot(id: ID, lhs: Boolean!, result: Boolean): Logical_Not_Entity!
  createOr(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_Or_Entity!
  createToggle(id: ID, result: Boolean, trigger: Boolean!): Logical_Toggle_Entity!
  createTrigger(id: ID, payload: JSON!, trigger: Boolean!): Logical_Trigger_Entity!
  createXnor(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_Xnor_Entity!
  createXor(id: ID, lhs: Boolean!, result: Boolean, rhs: Boolean!): Logical_Xor_Entity!
  "Each time it's triggered, either the then-payload or the else-payload gets propagated"
  ifThenElse(condition: Boolean, else_payload: JSON, id: ID, ids: [ID!], label: String, result: JSON, then_payload: JSON): Logical_IfThenElse_Entity_Mutations!
  "NAND"
  nand(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_Nand_Entity_Mutations!
  "NOR"
  nor(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_Nor_Entity_Mutations!
  "NOT"
  not(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean): Logical_Not_Entity_Mutations!
  "OR"
  or(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_Or_Entity_Mutations!
  "If triggered the state will toggled"
  toggle(id: ID, ids: [ID!], label: String, result: Boolean, trigger: Boolean): Logical_Toggle_Entity_Mutations!
  "If triggered the payload will be copied to the output"
  trigger(id: ID, ids: [ID!], label: String, payload: JSON, trigger: Boolean): Logical_Trigger_Entity_Mutations!
  "XNOR"
  xnor(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_Xnor_Entity_Mutations!
  "XOR"
  xor(id: ID, ids: [ID!], label: String, lhs: Boolean, result: Boolean, rhs: Boolean): Logical_Xor_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Logical"
type LogicalNamespace {
  "AND"
  and(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_And_Entity!]!
  "An AND Gate with three inputs"
  and3(id: String, input1: Boolean, input2: Boolean, input3: Boolean, label: String, result: Boolean): [Logical_And3_Entity!]!
  "Depending on the given condition outputs a result"
  conditionComponent: [Logical_Condition_Component!]!
  "Each time it's triggered, either the then-payload or the else-payload gets propagated"
  ifThenElse(condition: Boolean, else_payload: JSON, id: String, label: String, result: JSON, then_payload: JSON): [Logical_IfThenElse_Entity!]!
  "Executes a logical operation on the inputs lhs and rhs and outputs the result"
  logicalGateComponent: [Logical_LogicalGate_Component!]!
  "Executes a logical operation on the input lhs and outputs the result"
  logicalOperationComponent: [Logical_LogicalOperation_Component!]!
  "NAND"
  nand(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_Nand_Entity!]!
  "NOR"
  nor(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_Nor_Entity!]!
  "NOT"
  not(id: String, label: String, lhs: Boolean, result: Boolean): [Logical_Not_Entity!]!
  "OR"
  or(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_Or_Entity!]!
  "If triggered the state will toggled"
  toggle(id: String, label: String, result: Boolean, trigger: Boolean): [Logical_Toggle_Entity!]!
  "If triggered the payload will be copied to the output"
  trigger(id: String, label: String, payload: JSON, trigger: Boolean): [Logical_Trigger_Entity!]!
  "XNOR"
  xnor(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_Xnor_Entity!]!
  "XOR"
  xor(id: String, label: String, lhs: Boolean, result: Boolean, rhs: Boolean): [Logical_Xor_Entity!]!
}

"An AND Gate with three inputs"
type Logical_And3_Entity implements Entity {
  id: ID!
  input1: Boolean
  input2: Boolean
  input3: Boolean
  result: Boolean
}

type Logical_And3_Entity_Mutations {
  delete: [ID!]!
  update(input1: Boolean, input2: Boolean, input3: Boolean): [Logical_And3_Entity!]!
}

"AND"
type Logical_And_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_And_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_And_Entity!]!
}

"Each time it's triggered, either the then-payload or the else-payload gets propagated"
type Logical_IfThenElse_Entity implements Entity & Logical_Condition_Component {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "If the condition is false, the else_payload gets propagated"
  else_payload: JSON
  id: ID!
  "The result"
  result: JSON
  "If the condition is true, the then_payload gets propagated"
  then_payload: JSON
}

type Logical_IfThenElse_Entity_Mutations {
  delete: [ID!]!
  update(condition: Boolean, else_payload: JSON, then_payload: JSON): [Logical_IfThenElse_Entity!]!
}

"NAND"
type Logical_Nand_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_Nand_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_Nand_Entity!]!
}

"NOR"
type Logical_Nor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_Nor_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_Nor_Entity!]!
}

"NOT"
type Logical_Not_Entity implements Entity & Logical_LogicalOperation_Component {
  _c__logical__logical_operation: ID
  id: ID!
  lhs: Boolean
  result: Boolean
}

type Logical_Not_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean): [Logical_Not_Entity!]!
}

"OR"
type Logical_Or_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_Or_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_Or_Entity!]!
}

"If triggered the state will toggled"
type Logical_Toggle_Entity implements Entity & Result_ResultBoolean_Component & Trigger_Action_Component {
  _c__result__result_boolean: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Boolean
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Logical_Toggle_Entity_Mutations {
  delete: [ID!]!
  trigger: [Logical_Toggle_Entity!]!
  update(trigger: Boolean): [Logical_Toggle_Entity!]!
}

"If triggered the payload will be copied to the output"
type Logical_Trigger_Entity implements Entity & Trigger_Action_Component {
  _c__trigger__action: ID
  id: ID!
  payload: JSON
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Logical_Trigger_Entity_Mutations {
  delete: [ID!]!
  trigger: [Logical_Trigger_Entity!]!
  update(payload: JSON, trigger: Boolean): [Logical_Trigger_Entity!]!
}

"XNOR"
type Logical_Xnor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_Xnor_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_Xnor_Entity!]!
}

"XOR"
type Logical_Xor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type Logical_Xor_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Boolean, rhs: Boolean): [Logical_Xor_Entity!]!
}

"Queries for components, entities and relations on the namespace Metadata"
type MetadataNamespace {
  dublinCoreComponent: [Metadata_DublinCore_Component!]!
  id3Component: [Metadata_Id3_Component!]!
}

"Mutations"
type Mutation {
  arithmeticF64: ArithmeticF64Mutations!
  arithmeticI64: ArithmeticI64Mutations!
  arithmeticU64: ArithmeticU64Mutations!
  base: BaseMutations!
  binary: BinaryMutations!
  color: ColorMutations!
  comparison: ComparisonMutations!
  config: ConfigMutations!
  connector: ConnectorMutations!
  core: CoreMutations!
  dateTime: DateTimeMutations!
  flow: FlowMutations!
  git: GitMutations!
  http: HttpMutations!
  json: JsonMutations!
  logical: LogicalMutations!
  numericF64: NumericF64Mutations!
  numericI64: NumericI64Mutations!
  random: RandomMutations!
  state: StateMutations!
  string: StringMutations!
  system: SystemMutations!
  taxonomy: TaxonomyMutations!
  value: ValueMutations!
}

"Mutations for entities and relations on the namespace NumericF64"
type NumericF64Mutations {
  "Computes the absolute value"
  abs(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Abs_Entity_Mutations!
  "Computes the arccosine of a number"
  acos(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Acos_Entity_Mutations!
  "Inverse hyperbolic cosine function"
  acosh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Acosh_Entity_Mutations!
  "Computes the arcsine of a number"
  asin(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Asin_Entity_Mutations!
  "Inverse hyperbolic sine function"
  asinh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Asinh_Entity_Mutations!
  "Computes the arctangent of a number"
  atan(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Atan_Entity_Mutations!
  "Computes the four quadrant arctangent in radians"
  atan2(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): NumericF64_Atan2_Entity_Mutations!
  "Inverse hyperbolic tangent function"
  atanh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Atanh_Entity_Mutations!
  "Returns the cube root of a number"
  cbrt(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Cbrt_Entity_Mutations!
  "Returns the smallest integer greater than or equal to a number"
  ceil(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Ceil_Entity_Mutations!
  "Computes the cosine of a number (in radians)"
  cos(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Cos_Entity_Mutations!
  "Hyperbolic cosine function"
  cosh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Cosh_Entity_Mutations!
  createAbs(id: ID, lhs: Float!, result: Float): NumericF64_Abs_Entity!
  createAcos(id: ID, lhs: Float!, result: Float): NumericF64_Acos_Entity!
  createAcosh(id: ID, lhs: Float!, result: Float): NumericF64_Acosh_Entity!
  createAsin(id: ID, lhs: Float!, result: Float): NumericF64_Asin_Entity!
  createAsinh(id: ID, lhs: Float!, result: Float): NumericF64_Asinh_Entity!
  createAtan(id: ID, lhs: Float!, result: Float): NumericF64_Atan_Entity!
  createAtan2(id: ID, lhs: Float!, result: Float!, rhs: Float!): NumericF64_Atan2_Entity!
  createAtanh(id: ID, lhs: Float!, result: Float): NumericF64_Atanh_Entity!
  createCbrt(id: ID, lhs: Float!, result: Float): NumericF64_Cbrt_Entity!
  createCeil(id: ID, lhs: Float!, result: Float): NumericF64_Ceil_Entity!
  createCos(id: ID, lhs: Float!, result: Float): NumericF64_Cos_Entity!
  createCosh(id: ID, lhs: Float!, result: Float): NumericF64_Cosh_Entity!
  createExp(id: ID, lhs: Float!, result: Float): NumericF64_Exp_Entity!
  createExp2(id: ID, lhs: Float!, result: Float): NumericF64_Exp2_Entity!
  createFloor(id: ID, lhs: Float!, result: Float): NumericF64_Floor_Entity!
  createFract(id: ID, lhs: Float!, result: Float): NumericF64_Fract_Entity!
  createHypot(id: ID, lhs: Float!, result: Float!, rhs: Float!): NumericF64_Hypot_Entity!
  createLn(id: ID, lhs: Float!, result: Float): NumericF64_Ln_Entity!
  createLog(id: ID, lhs: Float!, result: Float!, rhs: Float!): NumericF64_Log_Entity!
  createLog10(id: ID, lhs: Float!, result: Float): NumericF64_Log10_Entity!
  createLog2(id: ID, lhs: Float!, result: Float): NumericF64_Log2_Entity!
  createPow(id: ID, lhs: Float!, result: Float!, rhs: Float!): NumericF64_Pow_Entity!
  createRecip(id: ID, lhs: Float!, result: Float): NumericF64_Recip_Entity!
  createRound(id: ID, lhs: Float!, result: Float): NumericF64_Round_Entity!
  createSignum(id: ID, lhs: Float!, result: Float): NumericF64_Signum_Entity!
  createSin(id: ID, lhs: Float!, result: Float): NumericF64_Sin_Entity!
  createSinh(id: ID, lhs: Float!, result: Float): NumericF64_Sinh_Entity!
  createSqrt(id: ID, lhs: Float!, result: Float): NumericF64_Sqrt_Entity!
  createTan(id: ID, lhs: Float!, result: Float): NumericF64_Tan_Entity!
  createTanh(id: ID, lhs: Float!, result: Float): NumericF64_Tanh_Entity!
  createToDegrees(id: ID, lhs: Float!, result: Float): NumericF64_ToDegrees_Entity!
  createToRadians(id: ID, lhs: Float!, result: Float): NumericF64_ToRadians_Entity!
  createTrunc(id: ID, lhs: Float!, result: Float): NumericF64_Trunc_Entity!
  "Returns e^(input), (the exponential function)"
  exp(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Exp_Entity_Mutations!
  "Returns 2^(input)"
  exp2(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Exp2_Entity_Mutations!
  "Returns the largest integer less than or equal to a number"
  floor(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Floor_Entity_Mutations!
  "Returns the fractional part of a number"
  fract(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Fract_Entity_Mutations!
  "Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y"
  hypot(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): NumericF64_Hypot_Entity_Mutations!
  "Returns the natural logarithm of the number"
  ln(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Ln_Entity_Mutations!
  "Returns the logarithm of the number with respect to an arbitrary base"
  log(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): NumericF64_Log_Entity_Mutations!
  "Returns the base 10 logarithm of the number"
  log10(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Log10_Entity_Mutations!
  "Returns the base 2 logarithm of the number"
  log2(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Log2_Entity_Mutations!
  "Raises a number to a power"
  pow(id: ID, ids: [ID!], label: String, lhs: Float, result: Float, rhs: Float): NumericF64_Pow_Entity_Mutations!
  "Takes the reciprocal (inverse) of a number, 1/x"
  recip(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Recip_Entity_Mutations!
  "Returns the nearest integer to a number. Round half-way cases away from 0.0"
  round(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Round_Entity_Mutations!
  "Returns a number that represents the sign of the input"
  signum(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Signum_Entity_Mutations!
  "Computes the sine of a number (in radians)"
  sin(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Sin_Entity_Mutations!
  "Hyperbolic sine function"
  sinh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Sinh_Entity_Mutations!
  "Returns the square root of a number"
  sqrt(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Sqrt_Entity_Mutations!
  "Computes the tangent of a number (in radians)"
  tan(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Tan_Entity_Mutations!
  "Hyperbolic tangent function"
  tanh(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Tanh_Entity_Mutations!
  "Converts radians to degrees"
  toDegrees(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_ToDegrees_Entity_Mutations!
  "Converts degrees to radians"
  toRadians(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_ToRadians_Entity_Mutations!
  "Returns the integer part of a number"
  trunc(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericF64_Trunc_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace NumericF64"
type NumericF64Namespace {
  "Computes the absolute value"
  abs(id: String, label: String, lhs: Float, result: Float): [NumericF64_Abs_Entity!]!
  "Computes the arccosine of a number"
  acos(id: String, label: String, lhs: Float, result: Float): [NumericF64_Acos_Entity!]!
  "Inverse hyperbolic cosine function"
  acosh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Acosh_Entity!]!
  "Computes the arcsine of a number"
  asin(id: String, label: String, lhs: Float, result: Float): [NumericF64_Asin_Entity!]!
  "Inverse hyperbolic sine function"
  asinh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Asinh_Entity!]!
  "Computes the arctangent of a number"
  atan(id: String, label: String, lhs: Float, result: Float): [NumericF64_Atan_Entity!]!
  "Computes the four quadrant arctangent in radians"
  atan2(id: String, label: String, lhs: Float, result: Float, rhs: Float): [NumericF64_Atan2_Entity!]!
  "Inverse hyperbolic tangent function"
  atanh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Atanh_Entity!]!
  "Returns the cube root of a number"
  cbrt(id: String, label: String, lhs: Float, result: Float): [NumericF64_Cbrt_Entity!]!
  "Returns the smallest integer greater than or equal to a number"
  ceil(id: String, label: String, lhs: Float, result: Float): [NumericF64_Ceil_Entity!]!
  "Computes the cosine of a number (in radians)"
  cos(id: String, label: String, lhs: Float, result: Float): [NumericF64_Cos_Entity!]!
  "Hyperbolic cosine function"
  cosh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Cosh_Entity!]!
  "Returns e^(input), (the exponential function)"
  exp(id: String, label: String, lhs: Float, result: Float): [NumericF64_Exp_Entity!]!
  "Returns 2^(input)"
  exp2(id: String, label: String, lhs: Float, result: Float): [NumericF64_Exp2_Entity!]!
  "Returns the largest integer less than or equal to a number"
  floor(id: String, label: String, lhs: Float, result: Float): [NumericF64_Floor_Entity!]!
  "Returns the fractional part of a number"
  fract(id: String, label: String, lhs: Float, result: Float): [NumericF64_Fract_Entity!]!
  "Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y"
  hypot(id: String, label: String, lhs: Float, result: Float, rhs: Float): [NumericF64_Hypot_Entity!]!
  "Returns the natural logarithm of the number"
  ln(id: String, label: String, lhs: Float, result: Float): [NumericF64_Ln_Entity!]!
  "Returns the logarithm of the number with respect to an arbitrary base"
  log(id: String, label: String, lhs: Float, result: Float, rhs: Float): [NumericF64_Log_Entity!]!
  "Returns the base 10 logarithm of the number"
  log10(id: String, label: String, lhs: Float, result: Float): [NumericF64_Log10_Entity!]!
  "Returns the base 2 logarithm of the number"
  log2(id: String, label: String, lhs: Float, result: Float): [NumericF64_Log2_Entity!]!
  "Raises a number to a power"
  pow(id: String, label: String, lhs: Float, result: Float, rhs: Float): [NumericF64_Pow_Entity!]!
  "Takes the reciprocal (inverse) of a number, 1/x"
  recip(id: String, label: String, lhs: Float, result: Float): [NumericF64_Recip_Entity!]!
  "Returns the nearest integer to a number. Round half-way cases away from 0.0"
  round(id: String, label: String, lhs: Float, result: Float): [NumericF64_Round_Entity!]!
  "Returns a number that represents the sign of the input"
  signum(id: String, label: String, lhs: Float, result: Float): [NumericF64_Signum_Entity!]!
  "Computes the sine of a number (in radians)"
  sin(id: String, label: String, lhs: Float, result: Float): [NumericF64_Sin_Entity!]!
  "Hyperbolic sine function"
  sinh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Sinh_Entity!]!
  "Returns the square root of a number"
  sqrt(id: String, label: String, lhs: Float, result: Float): [NumericF64_Sqrt_Entity!]!
  "Computes the tangent of a number (in radians)"
  tan(id: String, label: String, lhs: Float, result: Float): [NumericF64_Tan_Entity!]!
  "Hyperbolic tangent function"
  tanh(id: String, label: String, lhs: Float, result: Float): [NumericF64_Tanh_Entity!]!
  "Converts radians to degrees"
  toDegrees(id: String, label: String, lhs: Float, result: Float): [NumericF64_ToDegrees_Entity!]!
  "Converts degrees to radians"
  toRadians(id: String, label: String, lhs: Float, result: Float): [NumericF64_ToRadians_Entity!]!
  "Returns the integer part of a number"
  trunc(id: String, label: String, lhs: Float, result: Float): [NumericF64_Trunc_Entity!]!
}

"Computes the absolute value"
type NumericF64_Abs_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Abs_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Abs_Entity!]!
}

"Computes the arccosine of a number"
type NumericF64_Acos_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Acos_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Acos_Entity!]!
}

"Inverse hyperbolic cosine function"
type NumericF64_Acosh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Acosh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Acosh_Entity!]!
}

"Computes the arcsine of a number"
type NumericF64_Asin_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Asin_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Asin_Entity!]!
}

"Inverse hyperbolic sine function"
type NumericF64_Asinh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Asinh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Asinh_Entity!]!
}

"Computes the four quadrant arctangent in radians"
type NumericF64_Atan2_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type NumericF64_Atan2_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, result: Float, rhs: Float): [NumericF64_Atan2_Entity!]!
}

"Computes the arctangent of a number"
type NumericF64_Atan_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Atan_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Atan_Entity!]!
}

"Inverse hyperbolic tangent function"
type NumericF64_Atanh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Atanh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Atanh_Entity!]!
}

"Returns the cube root of a number"
type NumericF64_Cbrt_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Cbrt_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Cbrt_Entity!]!
}

"Returns the smallest integer greater than or equal to a number"
type NumericF64_Ceil_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Ceil_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Ceil_Entity!]!
}

"Computes the cosine of a number (in radians)"
type NumericF64_Cos_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Cos_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Cos_Entity!]!
}

"Hyperbolic cosine function"
type NumericF64_Cosh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Cosh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Cosh_Entity!]!
}

"Returns 2^(input)"
type NumericF64_Exp2_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Exp2_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Exp2_Entity!]!
}

"Returns e^(input), (the exponential function)"
type NumericF64_Exp_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Exp_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Exp_Entity!]!
}

"Returns the largest integer less than or equal to a number"
type NumericF64_Floor_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Floor_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Floor_Entity!]!
}

"Returns the fractional part of a number"
type NumericF64_Fract_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Fract_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Fract_Entity!]!
}

"Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y"
type NumericF64_Hypot_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type NumericF64_Hypot_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, result: Float, rhs: Float): [NumericF64_Hypot_Entity!]!
}

"Returns the natural logarithm of the number"
type NumericF64_Ln_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Ln_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Ln_Entity!]!
}

"Returns the base 10 logarithm of the number"
type NumericF64_Log10_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Log10_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Log10_Entity!]!
}

"Returns the base 2 logarithm of the number"
type NumericF64_Log2_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Log2_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Log2_Entity!]!
}

"Returns the logarithm of the number with respect to an arbitrary base"
type NumericF64_Log_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type NumericF64_Log_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, result: Float, rhs: Float): [NumericF64_Log_Entity!]!
}

"Raises a number to a power"
type NumericF64_Pow_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

type NumericF64_Pow_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float, result: Float, rhs: Float): [NumericF64_Pow_Entity!]!
}

"Takes the reciprocal (inverse) of a number, 1/x"
type NumericF64_Recip_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Recip_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Recip_Entity!]!
}

"Returns the nearest integer to a number. Round half-way cases away from 0.0"
type NumericF64_Round_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Round_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Round_Entity!]!
}

"Returns a number that represents the sign of the input"
type NumericF64_Signum_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Signum_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Signum_Entity!]!
}

"Computes the sine of a number (in radians)"
type NumericF64_Sin_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Sin_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Sin_Entity!]!
}

"Hyperbolic sine function"
type NumericF64_Sinh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Sinh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Sinh_Entity!]!
}

"Returns the square root of a number"
type NumericF64_Sqrt_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Sqrt_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Sqrt_Entity!]!
}

"Computes the tangent of a number (in radians)"
type NumericF64_Tan_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Tan_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Tan_Entity!]!
}

"Hyperbolic tangent function"
type NumericF64_Tanh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Tanh_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Tanh_Entity!]!
}

"Converts radians to degrees"
type NumericF64_ToDegrees_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_ToDegrees_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_ToDegrees_Entity!]!
}

"Converts degrees to radians"
type NumericF64_ToRadians_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_ToRadians_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_ToRadians_Entity!]!
}

"Returns the integer part of a number"
type NumericF64_Trunc_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericF64_Trunc_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericF64_Trunc_Entity!]!
}

"Mutations for entities and relations on the namespace NumericI64"
type NumericI64Mutations {
  "Computes the absolute value"
  abs(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericI64_Abs_Entity_Mutations!
  createAbs(id: ID, lhs: Float!, result: Float): NumericI64_Abs_Entity!
  createSignum(id: ID, lhs: Float!, result: Float): NumericI64_Signum_Entity!
  "Returns a number that represents the sign of the input"
  signum(id: ID, ids: [ID!], label: String, lhs: Float, result: Float): NumericI64_Signum_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace NumericI64"
type NumericI64Namespace {
  "Computes the absolute value"
  abs(id: String, label: String, lhs: Float, result: Float): [NumericI64_Abs_Entity!]!
  "Returns a number that represents the sign of the input"
  signum(id: String, label: String, lhs: Float, result: Float): [NumericI64_Signum_Entity!]!
}

"Computes the absolute value"
type NumericI64_Abs_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericI64_Abs_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericI64_Abs_Entity!]!
}

"Returns a number that represents the sign of the input"
type NumericI64_Signum_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericI64_Signum_Entity_Mutations {
  delete: [ID!]!
  update(lhs: Float): [NumericI64_Signum_Entity!]!
}

"Queries for components, entities and relations on the namespace Numeric"
type NumericNamespace {
  numericGateComponent: [Numeric_NumericGate_Component!]!
  numericOperationComponent: [Numeric_NumericOperation_Component!]!
}

"Queries"
type Query {
  arithmetic: ArithmeticNamespace!
  arithmeticF64: ArithmeticF64Namespace!
  arithmeticI64: ArithmeticI64Namespace!
  arithmeticU64: ArithmeticU64Namespace!
  base: BaseNamespace!
  binary: BinaryNamespace!
  color: ColorNamespace!
  comparison: ComparisonNamespace!
  config: ConfigNamespace!
  connector: ConnectorNamespace!
  core: CoreNamespace!
  dateTime: DateTimeNamespace!
  file: FileNamespace!
  flow: FlowNamespace!
  git: GitNamespace!
  http: HttpNamespace!
  json: JsonNamespace!
  logical: LogicalNamespace!
  metadata: MetadataNamespace!
  numeric: NumericNamespace!
  numericF64: NumericF64Namespace!
  numericI64: NumericI64Namespace!
  random: RandomNamespace!
  result: ResultNamespace!
  state: StateNamespace!
  string: StringNamespace!
  system: SystemNamespace!
  taxonomy: TaxonomyNamespace!
  trigger: TriggerNamespace!
  value: ValueNamespace!
}

"Mutations for entities and relations on the namespace Random"
type RandomMutations {
  createRandomBool(id: ID, result: Boolean, trigger: Boolean!): Random_RandomBool_Entity!
  createRandomF64(id: ID, result: Float, trigger: Boolean!): Random_RandomF64_Entity!
  createRandomF64Pseudo(id: ID, result: Float, seed: Float!, trigger: Boolean!): Random_RandomF64Pseudo_Entity!
  createRandomF64Range(high: Float!, id: ID, low: Float!, result: Float, trigger: Boolean!): Random_RandomF64Range_Entity!
  createRandomI64(id: ID, result: Float, trigger: Boolean!): Random_RandomI64_Entity!
  createRandomI64Pseudo(id: ID, result: Float, seed: Float!, trigger: Boolean!): Random_RandomI64Pseudo_Entity!
  createRandomI64Range(high: Float!, id: ID, low: Float!, result: Float, trigger: Boolean!): Random_RandomI64Range_Entity!
  createRandomString(id: ID, length: Float!, result: String, trigger: Boolean!): Random_RandomString_Entity!
  createRandomU64(id: ID, result: Float, trigger: Boolean!): Random_RandomU64_Entity!
  createRandomU64Pseudo(id: ID, result: Float, seed: Float!, trigger: Boolean!): Random_RandomU64Pseudo_Entity!
  createRandomU64Range(high: Float!, id: ID, low: Float!, result: Float, trigger: Boolean!): Random_RandomU64Range_Entity!
  createRandomUuid(id: ID, result: String, trigger: Boolean!): Random_RandomUuid_Entity!
  "Random Bool"
  randomBool(id: ID, ids: [ID!], label: String, result: Boolean, trigger: Boolean): Random_RandomBool_Entity_Mutations!
  "Random Floating Point Number"
  randomF64(id: ID, ids: [ID!], label: String, result: Float, trigger: Boolean): Random_RandomF64_Entity_Mutations!
  "Pseudo Random Floating Point Number"
  randomF64Pseudo(id: ID, ids: [ID!], label: String, result: Float, seed: Float, trigger: Boolean): Random_RandomF64Pseudo_Entity_Mutations!
  "Random Floating Point Number Within Range"
  randomF64Range(high: Float, id: ID, ids: [ID!], label: String, low: Float, result: Float, trigger: Boolean): Random_RandomF64Range_Entity_Mutations!
  "Random Signed Integer Number"
  randomI64(id: ID, ids: [ID!], label: String, result: Float, trigger: Boolean): Random_RandomI64_Entity_Mutations!
  "Pseudo Random Signed Integer Number"
  randomI64Pseudo(id: ID, ids: [ID!], label: String, result: Float, seed: Float, trigger: Boolean): Random_RandomI64Pseudo_Entity_Mutations!
  "Random Signed Integer Within Range"
  randomI64Range(high: Float, id: ID, ids: [ID!], label: String, low: Float, result: Float, trigger: Boolean): Random_RandomI64Range_Entity_Mutations!
  "Random String"
  randomString(id: ID, ids: [ID!], label: String, length: Float, result: String, trigger: Boolean): Random_RandomString_Entity_Mutations!
  "Random Unsigned Integer Number"
  randomU64(id: ID, ids: [ID!], label: String, result: Float, trigger: Boolean): Random_RandomU64_Entity_Mutations!
  "Pseudo Random Unsigned Integer Number"
  randomU64Pseudo(id: ID, ids: [ID!], label: String, result: Float, seed: Float, trigger: Boolean): Random_RandomU64Pseudo_Entity_Mutations!
  "Random Unsigned Integer Within Range"
  randomU64Range(high: Float, id: ID, ids: [ID!], label: String, low: Float, result: Float, trigger: Boolean): Random_RandomU64Range_Entity_Mutations!
  "Random UUID"
  randomUuid(id: ID, ids: [ID!], label: String, result: String, trigger: Boolean): Random_RandomUuid_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Random"
type RandomNamespace {
  "Pseudo Number Generator"
  pseudoNumberGeneratorComponent: [Random_PseudoNumberGenerator_Component!]!
  "Random Bool"
  randomBool(id: String, label: String, result: Boolean, trigger: Boolean): [Random_RandomBool_Entity!]!
  "Random Floating Point Number"
  randomF64(id: String, label: String, result: Float, trigger: Boolean): [Random_RandomF64_Entity!]!
  "Pseudo Random Floating Point Number"
  randomF64Pseudo(id: String, label: String, result: Float, seed: Float, trigger: Boolean): [Random_RandomF64Pseudo_Entity!]!
  "Random Floating Point Number Within Range"
  randomF64Range(high: Float, id: String, label: String, low: Float, result: Float, trigger: Boolean): [Random_RandomF64Range_Entity!]!
  "Random Signed Integer Number"
  randomI64(id: String, label: String, result: Float, trigger: Boolean): [Random_RandomI64_Entity!]!
  "Pseudo Random Signed Integer Number"
  randomI64Pseudo(id: String, label: String, result: Float, seed: Float, trigger: Boolean): [Random_RandomI64Pseudo_Entity!]!
  "Random Signed Integer Within Range"
  randomI64Range(high: Float, id: String, label: String, low: Float, result: Float, trigger: Boolean): [Random_RandomI64Range_Entity!]!
  "Random String"
  randomString(id: String, label: String, length: Float, result: String, trigger: Boolean): [Random_RandomString_Entity!]!
  "Random Unsigned Integer Number"
  randomU64(id: String, label: String, result: Float, trigger: Boolean): [Random_RandomU64_Entity!]!
  "Pseudo Random Unsigned Integer Number"
  randomU64Pseudo(id: String, label: String, result: Float, seed: Float, trigger: Boolean): [Random_RandomU64Pseudo_Entity!]!
  "Random Unsigned Integer Within Range"
  randomU64Range(high: Float, id: String, label: String, low: Float, result: Float, trigger: Boolean): [Random_RandomU64Range_Entity!]!
  "Random UUID"
  randomUuid(id: String, label: String, result: String, trigger: Boolean): [Random_RandomUuid_Entity!]!
  "Range"
  rangeComponent: [Random_Range_Component!]!
}

"Random Bool"
type Random_RandomBool_Entity implements Entity & Result_ResultBoolean_Component & Trigger_Action_Component {
  _c__result__result_boolean: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Boolean
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomBool_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomBool_Entity!]!
  update(trigger: Boolean): [Random_RandomBool_Entity!]!
}

"Pseudo Random Floating Point Number"
type Random_RandomF64Pseudo_Entity implements Entity & Random_PseudoNumberGenerator_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__pseudo_number_generator: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomF64Pseudo_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomF64Pseudo_Entity!]!
  update(seed: Float, trigger: Boolean): [Random_RandomF64Pseudo_Entity!]!
}

"Random Floating Point Number Within Range"
type Random_RandomF64Range_Entity implements Entity & Random_Range_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__range: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  high: Float
  id: ID!
  low: Float
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomF64Range_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomF64Range_Entity!]!
  update(high: Float, low: Float, trigger: Boolean): [Random_RandomF64Range_Entity!]!
}

"Random Floating Point Number"
type Random_RandomF64_Entity implements Entity & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomF64_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomF64_Entity!]!
  update(trigger: Boolean): [Random_RandomF64_Entity!]!
}

"Pseudo Random Signed Integer Number"
type Random_RandomI64Pseudo_Entity implements Entity & Random_PseudoNumberGenerator_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__pseudo_number_generator: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomI64Pseudo_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomI64Pseudo_Entity!]!
  update(seed: Float, trigger: Boolean): [Random_RandomI64Pseudo_Entity!]!
}

"Random Signed Integer Within Range"
type Random_RandomI64Range_Entity implements Entity & Random_Range_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__range: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  high: Float
  id: ID!
  low: Float
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomI64Range_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomI64Range_Entity!]!
  update(high: Float, low: Float, trigger: Boolean): [Random_RandomI64Range_Entity!]!
}

"Random Signed Integer Number"
type Random_RandomI64_Entity implements Entity & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomI64_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomI64_Entity!]!
  update(trigger: Boolean): [Random_RandomI64_Entity!]!
}

"Random String"
type Random_RandomString_Entity implements Entity & Result_ResultString_Component & Trigger_Action_Component {
  _c__result__result_string: ID
  _c__trigger__action: ID
  id: ID!
  length: Float
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomString_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomString_Entity!]!
  update(length: Float, trigger: Boolean): [Random_RandomString_Entity!]!
}

"Pseudo Random Unsigned Integer Number"
type Random_RandomU64Pseudo_Entity implements Entity & Random_PseudoNumberGenerator_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__pseudo_number_generator: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomU64Pseudo_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomU64Pseudo_Entity!]!
  update(seed: Float, trigger: Boolean): [Random_RandomU64Pseudo_Entity!]!
}

"Random Unsigned Integer Within Range"
type Random_RandomU64Range_Entity implements Entity & Random_Range_Component & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__random__range: ID
  _c__result__result_number: ID
  _c__trigger__action: ID
  high: Float
  id: ID!
  low: Float
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomU64Range_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomU64Range_Entity!]!
  update(high: Float, low: Float, trigger: Boolean): [Random_RandomU64Range_Entity!]!
}

"Random Unsigned Integer Number"
type Random_RandomU64_Entity implements Entity & Result_ResultNumber_Component & Trigger_Action_Component {
  _c__result__result_number: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomU64_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomU64_Entity!]!
  update(trigger: Boolean): [Random_RandomU64_Entity!]!
}

"Random UUID"
type Random_RandomUuid_Entity implements Entity & Result_ResultString_Component & Trigger_Action_Component {
  _c__result__result_string: ID
  _c__trigger__action: ID
  id: ID!
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

type Random_RandomUuid_Entity_Mutations {
  delete: [ID!]!
  trigger: [Random_RandomUuid_Entity!]!
  update(trigger: Boolean): [Random_RandomUuid_Entity!]!
}

"Queries for components, entities and relations on the namespace Result"
type ResultNamespace {
  "The entity returns data of any datatype"
  resultAnyComponent: [Result_ResultAny_Component!]!
  "The entity returns an array"
  resultArrayComponent: [Result_ResultArray_Component!]!
  "The entity returns a boolean"
  resultBooleanComponent: [Result_ResultBoolean_Component!]!
  "The entity returns a number"
  resultNumberComponent: [Result_ResultNumber_Component!]!
  "The entity returns an object"
  resultObjectComponent: [Result_ResultObject_Component!]!
  "The entity returns a string"
  resultStringComponent: [Result_ResultString_Component!]!
}

"Mutations for entities and relations on the namespace State"
type StateMutations {
  createStateArray(id: ID, name: String!, set_state: [JSON!]!, state: [JSON!], value: [JSON!]!): State_StateArray_Entity!
  createStateBoolean(id: ID, name: String!, set_state: Boolean!, state: Boolean, value: Boolean!): State_StateBoolean_Entity!
  createStateNumber(id: ID, name: String!, set_state: Float!, state: Float, value: Float!): State_StateNumber_Entity!
  createStateObject(id: ID, name: String!, set_state: JSON!, state: JSON, value: JSON!): State_StateObject_Entity!
  createStateString(id: ID, name: String!, set_state: String!, state: String, value: String!): State_StateString_Entity!
  "State of type array"
  stateArray(id: ID, ids: [ID!], label: String, name: String, set_state: [JSON!], state: [JSON!], value: [JSON!]): State_StateArray_Entity_Mutations!
  "State of type boolean"
  stateBoolean(id: ID, ids: [ID!], label: String, name: String, set_state: Boolean, state: Boolean, value: Boolean): State_StateBoolean_Entity_Mutations!
  "State of type number"
  stateNumber(id: ID, ids: [ID!], label: String, name: String, set_state: Float, state: Float, value: Float): State_StateNumber_Entity_Mutations!
  "State of type object"
  stateObject(id: ID, ids: [ID!], label: String, name: String, set_state: JSON, state: JSON, value: JSON): State_StateObject_Entity_Mutations!
  "State of type string"
  stateString(id: ID, ids: [ID!], label: String, name: String, set_state: String, state: String, value: String): State_StateString_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace State"
type StateNamespace {
  "State of type array"
  stateArray(id: String, label: String, name: String, set_state: [JSON!], state: [JSON!], value: [JSON!]): [State_StateArray_Entity!]!
  "State of type array"
  stateArrayComponent: [State_StateArray_Component!]!
  "State of type boolean"
  stateBoolean(id: String, label: String, name: String, set_state: Boolean, state: Boolean, value: Boolean): [State_StateBoolean_Entity!]!
  "State of type boolean"
  stateBooleanComponent: [State_StateBoolean_Component!]!
  stateDebuggerDebugComponent: [State_StateDebuggerDebug_Component!]!
  stateDebuggerTraceComponent: [State_StateDebuggerTrace_Component!]!
  "State of type number"
  stateNumber(id: String, label: String, name: String, set_state: Float, state: Float, value: Float): [State_StateNumber_Entity!]!
  "State of type number"
  stateNumberComponent: [State_StateNumber_Component!]!
  "State of type object"
  stateObject(id: String, label: String, name: String, set_state: JSON, state: JSON, value: JSON): [State_StateObject_Entity!]!
  "State of type object"
  stateObjectComponent: [State_StateObject_Component!]!
  "State of type string"
  stateString(id: String, label: String, name: String, set_state: String, state: String, value: String): [State_StateString_Entity!]!
  "State of type string"
  stateStringComponent: [State_StateString_Component!]!
}

"State of type array"
type State_StateArray_Entity implements Base_Named_Component & Entity & State_StateArray_Component & Value_ValueArray_Component {
  _c__base__named: ID
  _c__state__state_array: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: JSON
  state: JSON
  value: JSON
}

type State_StateArray_Entity_Mutations {
  delete: [ID!]!
  update(name: String, set_state: [JSON!], value: [JSON!]): [State_StateArray_Entity!]!
}

"State of type boolean"
type State_StateBoolean_Entity implements Base_Named_Component & Entity & State_StateBoolean_Component & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__state__state_boolean: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Boolean
  state: Boolean
  value: Boolean
}

type State_StateBoolean_Entity_Mutations {
  delete: [ID!]!
  update(name: String, set_state: Boolean, value: Boolean): [State_StateBoolean_Entity!]!
}

"State of type number"
type State_StateNumber_Entity implements Base_Named_Component & Entity & State_StateNumber_Component & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__state__state_number: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Float
  state: Float
  value: Float
}

type State_StateNumber_Entity_Mutations {
  delete: [ID!]!
  update(name: String, set_state: Float, value: Float): [State_StateNumber_Entity!]!
}

"State of type object"
type State_StateObject_Entity implements Base_Named_Component & Entity & State_StateObject_Component & Value_ValueObject_Component {
  _c__base__named: ID
  _c__state__state_object: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: JSON
  state: JSON
  value: JSON
}

type State_StateObject_Entity_Mutations {
  delete: [ID!]!
  update(name: String, set_state: JSON, value: JSON): [State_StateObject_Entity!]!
}

"State of type string"
type State_StateString_Entity implements Base_Named_Component & Entity & State_StateString_Component & Value_ValueString_Component {
  _c__base__named: ID
  _c__state__state_string: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

type State_StateString_Entity_Mutations {
  delete: [ID!]!
  update(name: String, set_state: String, value: String): [State_StateString_Entity!]!
}

"Mutations for entities and relations on the namespace String"
type StringMutations {
  "Converts the input to camel case"
  camelCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_CamelCase_Entity_Mutations!
  "Converts the first character of the input to upper case and convert the rest of the input to lower case"
  capitalize(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Capitalize_Entity_Mutations!
  "Counts the characters"
  charCount(id: ID, ids: [ID!], label: String, lhs: String, result: Float): String_CharCount_Entity_Mutations!
  "Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
  charCountGraphemes(id: ID, ids: [ID!], label: String, lhs: String, result: Float): String_CharCountGraphemes_Entity_Mutations!
  "Returns everything after the given search"
  chopAfter(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopAfter_Entity_Mutations!
  "Returns everything after the last given search"
  chopAfterLast(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopAfterLast_Entity_Mutations!
  "Returns everything before the given search"
  chopBefore(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopBefore_Entity_Mutations!
  "Returns everything before the last given search"
  chopBeforeLast(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopBeforeLast_Entity_Mutations!
  "Extracts the prefix from the input"
  chopRemovePrefix(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopRemovePrefix_Entity_Mutations!
  "Extracts the suffix from the input"
  chopRemoveSuffix(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_ChopRemoveSuffix_Entity_Mutations!
  "Concat"
  concat(id: ID, ids: [ID!], label: String, lhs: String, result: String, rhs: String): String_Concat_Entity_Mutations!
  "Contains"
  contains(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean, rhs: String): String_Contains_Entity_Mutations!
  "Counts the number of substring appearances in the input string"
  countSubstrings(id: ID, ids: [ID!], label: String, lhs: String, result: Float, rhs: String): String_CountSubstrings_Entity_Mutations!
  "Counting occurrences of unique words in the input string. This function respects unicode"
  countUniqueWords(id: ID, ids: [ID!], label: String, lhs: String, result: Float, rhs: String): String_CountUniqueWords_Entity_Mutations!
  "Counts the number of words in the input string"
  countWords(id: ID, ids: [ID!], label: String, lhs: String, result: Float, rhs: String): String_CountWords_Entity_Mutations!
  createCamelCase(id: ID, lhs: String!, result: String): String_CamelCase_Entity!
  createCapitalize(id: ID, lhs: String!, result: String): String_Capitalize_Entity!
  createCharCount(id: ID, lhs: String!, result: Float): String_CharCount_Entity!
  createCharCountGraphemes(id: ID, lhs: String!, result: Float): String_CharCountGraphemes_Entity!
  createChopAfter(id: ID, lhs: String!, result: String, rhs: String!): String_ChopAfter_Entity!
  createChopAfterLast(id: ID, lhs: String!, result: String, rhs: String!): String_ChopAfterLast_Entity!
  createChopBefore(id: ID, lhs: String!, result: String, rhs: String!): String_ChopBefore_Entity!
  createChopBeforeLast(id: ID, lhs: String!, result: String, rhs: String!): String_ChopBeforeLast_Entity!
  createChopRemovePrefix(id: ID, lhs: String!, result: String, rhs: String!): String_ChopRemovePrefix_Entity!
  createChopRemoveSuffix(id: ID, lhs: String!, result: String, rhs: String!): String_ChopRemoveSuffix_Entity!
  createConcat(id: ID, lhs: String!, result: String, rhs: String!): String_Concat_Entity!
  createContains(id: ID, lhs: String!, result: Boolean, rhs: String!): String_Contains_Entity!
  createCountSubstrings(id: ID, lhs: String!, result: Float, rhs: String!): String_CountSubstrings_Entity!
  createCountUniqueWords(id: ID, lhs: String!, result: Float, rhs: String!): String_CountUniqueWords_Entity!
  createCountWords(id: ID, lhs: String!, result: Float, rhs: String!): String_CountWords_Entity!
  createDecapitalize(id: ID, lhs: String!, result: String): String_Decapitalize_Entity!
  createEndsWith(id: ID, lhs: String!, result: Boolean, rhs: String!): String_EndsWith_Entity!
  createEscapeHtml(id: ID, lhs: String!, result: String): String_EscapeHtml_Entity!
  createEscapeRegexp(id: ID, lhs: String!, result: String): String_EscapeRegexp_Entity!
  createIsAlpha(id: ID, lhs: String!, result: Boolean): String_IsAlpha_Entity!
  createIsAlphaDigit(id: ID, lhs: String!, result: Boolean): String_IsAlphaDigit_Entity!
  createIsBlank(id: ID, lhs: String!, result: Boolean): String_IsBlank_Entity!
  createIsCamelCase(id: ID, lhs: String!, result: Boolean): String_IsCamelCase_Entity!
  createIsCapitalize(id: ID, lhs: String!, result: Boolean): String_IsCapitalize_Entity!
  createIsDecapitalize(id: ID, lhs: String!, result: Boolean): String_IsDecapitalize_Entity!
  createIsDigit(id: ID, lhs: String!, result: Boolean): String_IsDigit_Entity!
  createIsEmpty(id: ID, lhs: String!, result: Boolean): String_IsEmpty_Entity!
  createIsKebabCase(id: ID, lhs: String!, result: Boolean): String_IsKebabCase_Entity!
  createIsLowerFirst(id: ID, lhs: String!, result: Boolean): String_IsLowerFirst_Entity!
  createIsLowercase(id: ID, lhs: String!, result: Boolean): String_IsLowercase_Entity!
  createIsNumeric(id: ID, lhs: String!, result: Boolean): String_IsNumeric_Entity!
  createIsPascalCase(id: ID, lhs: String!, result: Boolean): String_IsPascalCase_Entity!
  createIsShoutyKebabCase(id: ID, lhs: String!, result: Boolean): String_IsShoutyKebabCase_Entity!
  createIsShoutySnakeCase(id: ID, lhs: String!, result: Boolean): String_IsShoutySnakeCase_Entity!
  createIsSnakeCase(id: ID, lhs: String!, result: Boolean): String_IsSnakeCase_Entity!
  createIsTitleCase(id: ID, lhs: String!, result: Boolean): String_IsTitleCase_Entity!
  createIsTrainCase(id: ID, lhs: String!, result: Boolean): String_IsTrainCase_Entity!
  createIsUpperFirst(id: ID, lhs: String!, result: Boolean): String_IsUpperFirst_Entity!
  createIsUppercase(id: ID, lhs: String!, result: Boolean): String_IsUppercase_Entity!
  createKebabCase(id: ID, lhs: String!, result: String): String_KebabCase_Entity!
  createLowerFirst(id: ID, lhs: String!, result: String): String_LowerFirst_Entity!
  createLowercase(id: ID, lhs: String!, result: String): String_Lowercase_Entity!
  createPascalCase(id: ID, lhs: String!, result: String): String_PascalCase_Entity!
  createReverse(id: ID, lhs: String!, result: String): String_Reverse_Entity!
  createShoutyKebabCase(id: ID, lhs: String!, result: String): String_ShoutyKebabCase_Entity!
  createShoutySnakeCase(id: ID, lhs: String!, result: String): String_ShoutySnakeCase_Entity!
  createSnakeCase(id: ID, lhs: String!, result: String): String_SnakeCase_Entity!
  createStartsWith(id: ID, lhs: String!, result: Boolean, rhs: String!): String_StartsWith_Entity!
  createStringLength(id: ID, lhs: String!, result: Float): String_StringLength_Entity!
  createStripHtmlTags(id: ID, lhs: String!, result: String): String_StripHtmlTags_Entity!
  createSwapCase(id: ID, lhs: String!, result: String): String_SwapCase_Entity!
  createTemplating(context: JSON!, id: ID, result: String!, template: String!): String_Templating_Entity!
  createTitleCase(id: ID, lhs: String!, result: String): String_TitleCase_Entity!
  createTrainCase(id: ID, lhs: String!, result: String): String_TrainCase_Entity!
  createTrim(id: ID, lhs: String!, result: String): String_Trim_Entity!
  createTrimEnd(id: ID, lhs: String!, result: String): String_TrimEnd_Entity!
  createTrimStart(id: ID, lhs: String!, result: String): String_TrimStart_Entity!
  createUnescapeHtml(id: ID, lhs: String!, result: String): String_UnescapeHtml_Entity!
  createUpperFirst(id: ID, lhs: String!, result: String): String_UpperFirst_Entity!
  createUppercase(id: ID, lhs: String!, result: String): String_Uppercase_Entity!
  "Converts the first character of the input to lower case and convert the rest of the input to lower case"
  decapitalize(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Decapitalize_Entity_Mutations!
  "Ends With"
  endsWith(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean, rhs: String): String_EndsWith_Entity_Mutations!
  "Escapes HTML special characters"
  escapeHtml(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_EscapeHtml_Entity_Mutations!
  "Escapes the regular expression special characters"
  escapeRegexp(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_EscapeRegexp_Entity_Mutations!
  "Checks whether the input string contains only alpha characters"
  isAlpha(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsAlpha_Entity_Mutations!
  "Checks whether the input string contains contains only alpha and digit characters"
  isAlphaDigit(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsAlphaDigit_Entity_Mutations!
  "Checks whether the input string is empty or contains only whitespaces"
  isBlank(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsBlank_Entity_Mutations!
  "Checks whether the input string is camelCased"
  isCamelCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsCamelCase_Entity_Mutations!
  "Checks whether the input string is capitalized and the rest of the input string is lower case"
  isCapitalize(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsCapitalize_Entity_Mutations!
  "Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
  isDecapitalize(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsDecapitalize_Entity_Mutations!
  "Checks whether the input string contains only digit characters"
  isDigit(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsDigit_Entity_Mutations!
  "Checks whether the input string is empty"
  isEmpty(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsEmpty_Entity_Mutations!
  "Checks whether the input string is kebab-cased"
  isKebabCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsKebabCase_Entity_Mutations!
  "Checks whether the input string has the first character in lower case"
  isLowerFirst(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsLowerFirst_Entity_Mutations!
  "Checks whether the input string has only lower case characters"
  isLowercase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsLowercase_Entity_Mutations!
  "Checks whether the input string is numeric"
  isNumeric(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsNumeric_Entity_Mutations!
  "Checks whether the input string is PascalCased"
  isPascalCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsPascalCase_Entity_Mutations!
  "Checks whether the input string is SHOUTY-KEBAB-CASED"
  isShoutyKebabCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsShoutyKebabCase_Entity_Mutations!
  "Checks whether the input string is SHOUTY_SNAKE_CASED"
  isShoutySnakeCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsShoutySnakeCase_Entity_Mutations!
  "Checks whether the input string is snake_cased"
  isSnakeCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsSnakeCase_Entity_Mutations!
  "Checks whether the input string is a titlecased string and there is at least one character"
  isTitleCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsTitleCase_Entity_Mutations!
  "Checks whether the input string is Train-Cased"
  isTrainCase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsTrainCase_Entity_Mutations!
  "Checks whether the input string has the first character in upper case"
  isUpperFirst(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsUpperFirst_Entity_Mutations!
  "Checks whether the input string has only upper case characters"
  isUppercase(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean): String_IsUppercase_Entity_Mutations!
  "Converts the input to kebab case"
  kebabCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_KebabCase_Entity_Mutations!
  "Converts the first character of the input to lower case"
  lowerFirst(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_LowerFirst_Entity_Mutations!
  "Lowercase"
  lowercase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Lowercase_Entity_Mutations!
  "Converts the input to pascal case"
  pascalCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_PascalCase_Entity_Mutations!
  "Reverses the given string"
  reverse(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Reverse_Entity_Mutations!
  "Converts the input to SHOUTY kebab case"
  shoutyKebabCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_ShoutyKebabCase_Entity_Mutations!
  "Converts the title to SHOUTY snake case"
  shoutySnakeCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_ShoutySnakeCase_Entity_Mutations!
  "Converts the subject to snake case"
  snakeCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_SnakeCase_Entity_Mutations!
  "Starts With"
  startsWith(id: ID, ids: [ID!], label: String, lhs: String, result: Boolean, rhs: String): String_StartsWith_Entity_Mutations!
  "Returns the length of the input string"
  stringLength(id: ID, ids: [ID!], label: String, lhs: String, result: Float): String_StringLength_Entity_Mutations!
  "Strips all HTML tags"
  stripHtmlTags(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_StripHtmlTags_Entity_Mutations!
  "Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
  swapCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_SwapCase_Entity_Mutations!
  "Renders a template"
  templating(context: JSON, id: ID, ids: [ID!], label: String, result: String, template: String): String_Templating_Entity_Mutations!
  "Converts the input to title case"
  titleCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_TitleCase_Entity_Mutations!
  "Converts the input to train case"
  trainCase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_TrainCase_Entity_Mutations!
  "Trim"
  trim(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Trim_Entity_Mutations!
  "Trim  End"
  trimEnd(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_TrimEnd_Entity_Mutations!
  "Trim  Start"
  trimStart(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_TrimStart_Entity_Mutations!
  "Unescapes HTML special characters"
  unescapeHtml(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_UnescapeHtml_Entity_Mutations!
  "Converts the first character of the title to upper case"
  upperFirst(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_UpperFirst_Entity_Mutations!
  "Uppercase"
  uppercase(id: ID, ids: [ID!], label: String, lhs: String, result: String): String_Uppercase_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace String"
type StringNamespace {
  "Converts the input to camel case"
  camelCase(id: String, label: String, lhs: String, result: String): [String_CamelCase_Entity!]!
  "Converts the first character of the input to upper case and convert the rest of the input to lower case"
  capitalize(id: String, label: String, lhs: String, result: String): [String_Capitalize_Entity!]!
  "Counts the characters"
  charCount(id: String, label: String, lhs: String, result: Float): [String_CharCount_Entity!]!
  "Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
  charCountGraphemes(id: String, label: String, lhs: String, result: Float): [String_CharCountGraphemes_Entity!]!
  "Returns everything after the given search"
  chopAfter(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopAfter_Entity!]!
  "Returns everything after the last given search"
  chopAfterLast(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopAfterLast_Entity!]!
  "Returns everything before the given search"
  chopBefore(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopBefore_Entity!]!
  "Returns everything before the last given search"
  chopBeforeLast(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopBeforeLast_Entity!]!
  "Extracts the prefix from the input"
  chopRemovePrefix(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopRemovePrefix_Entity!]!
  "Extracts the suffix from the input"
  chopRemoveSuffix(id: String, label: String, lhs: String, result: String, rhs: String): [String_ChopRemoveSuffix_Entity!]!
  "Concat"
  concat(id: String, label: String, lhs: String, result: String, rhs: String): [String_Concat_Entity!]!
  "Contains"
  contains(id: String, label: String, lhs: String, result: Boolean, rhs: String): [String_Contains_Entity!]!
  "Counts the number of substring appearances in the input string"
  countSubstrings(id: String, label: String, lhs: String, result: Float, rhs: String): [String_CountSubstrings_Entity!]!
  "Counting occurrences of unique words in the input string. This function respects unicode"
  countUniqueWords(id: String, label: String, lhs: String, result: Float, rhs: String): [String_CountUniqueWords_Entity!]!
  "Counts the number of words in the input string"
  countWords(id: String, label: String, lhs: String, result: Float, rhs: String): [String_CountWords_Entity!]!
  "Converts the first character of the input to lower case and convert the rest of the input to lower case"
  decapitalize(id: String, label: String, lhs: String, result: String): [String_Decapitalize_Entity!]!
  "Ends With"
  endsWith(id: String, label: String, lhs: String, result: Boolean, rhs: String): [String_EndsWith_Entity!]!
  "Escapes HTML special characters"
  escapeHtml(id: String, label: String, lhs: String, result: String): [String_EscapeHtml_Entity!]!
  "Escapes the regular expression special characters"
  escapeRegexp(id: String, label: String, lhs: String, result: String): [String_EscapeRegexp_Entity!]!
  "Checks whether the input string contains only alpha characters"
  isAlpha(id: String, label: String, lhs: String, result: Boolean): [String_IsAlpha_Entity!]!
  "Checks whether the input string contains contains only alpha and digit characters"
  isAlphaDigit(id: String, label: String, lhs: String, result: Boolean): [String_IsAlphaDigit_Entity!]!
  "Checks whether the input string is empty or contains only whitespaces"
  isBlank(id: String, label: String, lhs: String, result: Boolean): [String_IsBlank_Entity!]!
  "Checks whether the input string is camelCased"
  isCamelCase(id: String, label: String, lhs: String, result: Boolean): [String_IsCamelCase_Entity!]!
  "Checks whether the input string is capitalized and the rest of the input string is lower case"
  isCapitalize(id: String, label: String, lhs: String, result: Boolean): [String_IsCapitalize_Entity!]!
  "Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
  isDecapitalize(id: String, label: String, lhs: String, result: Boolean): [String_IsDecapitalize_Entity!]!
  "Checks whether the input string contains only digit characters"
  isDigit(id: String, label: String, lhs: String, result: Boolean): [String_IsDigit_Entity!]!
  "Checks whether the input string is empty"
  isEmpty(id: String, label: String, lhs: String, result: Boolean): [String_IsEmpty_Entity!]!
  "Checks whether the input string is kebab-cased"
  isKebabCase(id: String, label: String, lhs: String, result: Boolean): [String_IsKebabCase_Entity!]!
  "Checks whether the input string has the first character in lower case"
  isLowerFirst(id: String, label: String, lhs: String, result: Boolean): [String_IsLowerFirst_Entity!]!
  "Checks whether the input string has only lower case characters"
  isLowercase(id: String, label: String, lhs: String, result: Boolean): [String_IsLowercase_Entity!]!
  "Checks whether the input string is numeric"
  isNumeric(id: String, label: String, lhs: String, result: Boolean): [String_IsNumeric_Entity!]!
  "Checks whether the input string is PascalCased"
  isPascalCase(id: String, label: String, lhs: String, result: Boolean): [String_IsPascalCase_Entity!]!
  "Checks whether the input string is SHOUTY-KEBAB-CASED"
  isShoutyKebabCase(id: String, label: String, lhs: String, result: Boolean): [String_IsShoutyKebabCase_Entity!]!
  "Checks whether the input string is SHOUTY_SNAKE_CASED"
  isShoutySnakeCase(id: String, label: String, lhs: String, result: Boolean): [String_IsShoutySnakeCase_Entity!]!
  "Checks whether the input string is snake_cased"
  isSnakeCase(id: String, label: String, lhs: String, result: Boolean): [String_IsSnakeCase_Entity!]!
  "Checks whether the input string is a titlecased string and there is at least one character"
  isTitleCase(id: String, label: String, lhs: String, result: Boolean): [String_IsTitleCase_Entity!]!
  "Checks whether the input string is Train-Cased"
  isTrainCase(id: String, label: String, lhs: String, result: Boolean): [String_IsTrainCase_Entity!]!
  "Checks whether the input string has the first character in upper case"
  isUpperFirst(id: String, label: String, lhs: String, result: Boolean): [String_IsUpperFirst_Entity!]!
  "Checks whether the input string has only upper case characters"
  isUppercase(id: String, label: String, lhs: String, result: Boolean): [String_IsUppercase_Entity!]!
  "Converts the input to kebab case"
  kebabCase(id: String, label: String, lhs: String, result: String): [String_KebabCase_Entity!]!
  "Converts the first character of the input to lower case"
  lowerFirst(id: String, label: String, lhs: String, result: String): [String_LowerFirst_Entity!]!
  "Lowercase"
  lowercase(id: String, label: String, lhs: String, result: String): [String_Lowercase_Entity!]!
  "Converts the input to pascal case"
  pascalCase(id: String, label: String, lhs: String, result: String): [String_PascalCase_Entity!]!
  "Reverses the given string"
  reverse(id: String, label: String, lhs: String, result: String): [String_Reverse_Entity!]!
  "Converts the input to SHOUTY kebab case"
  shoutyKebabCase(id: String, label: String, lhs: String, result: String): [String_ShoutyKebabCase_Entity!]!
  "Converts the title to SHOUTY snake case"
  shoutySnakeCase(id: String, label: String, lhs: String, result: String): [String_ShoutySnakeCase_Entity!]!
  "Converts the subject to snake case"
  snakeCase(id: String, label: String, lhs: String, result: String): [String_SnakeCase_Entity!]!
  "Starts With"
  startsWith(id: String, label: String, lhs: String, result: Boolean, rhs: String): [String_StartsWith_Entity!]!
  stringBoolOperationComponent: [String_StringBoolOperation_Component!]!
  stringComparisonComponent: [String_StringComparison_Component!]!
  stringGateComponent: [String_StringGate_Component!]!
  "Returns the length of the input string"
  stringLength(id: String, label: String, lhs: String, result: Float): [String_StringLength_Entity!]!
  stringNumberOperationComponent: [String_StringNumberOperation_Component!]!
  stringOperationComponent: [String_StringOperation_Component!]!
  stringStringNumberGateComponent: [String_StringStringNumberGate_Component!]!
  "Strips all HTML tags"
  stripHtmlTags(id: String, label: String, lhs: String, result: String): [String_StripHtmlTags_Entity!]!
  "Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
  swapCase(id: String, label: String, lhs: String, result: String): [String_SwapCase_Entity!]!
  "Renders a template"
  templating(context: JSON, id: String, label: String, result: String, template: String): [String_Templating_Entity!]!
  "Converts the input to title case"
  titleCase(id: String, label: String, lhs: String, result: String): [String_TitleCase_Entity!]!
  "Converts the input to train case"
  trainCase(id: String, label: String, lhs: String, result: String): [String_TrainCase_Entity!]!
  "Trim"
  trim(id: String, label: String, lhs: String, result: String): [String_Trim_Entity!]!
  "Trim  End"
  trimEnd(id: String, label: String, lhs: String, result: String): [String_TrimEnd_Entity!]!
  "Trim  Start"
  trimStart(id: String, label: String, lhs: String, result: String): [String_TrimStart_Entity!]!
  "Unescapes HTML special characters"
  unescapeHtml(id: String, label: String, lhs: String, result: String): [String_UnescapeHtml_Entity!]!
  "Converts the first character of the title to upper case"
  upperFirst(id: String, label: String, lhs: String, result: String): [String_UpperFirst_Entity!]!
  "Uppercase"
  uppercase(id: String, label: String, lhs: String, result: String): [String_Uppercase_Entity!]!
}

"Converts the input to camel case"
type String_CamelCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_CamelCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_CamelCase_Entity!]!
}

"Converts the first character of the input to upper case and convert the rest of the input to lower case"
type String_Capitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Capitalize_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Capitalize_Entity!]!
}

"Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
type String_CharCountGraphemes_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

type String_CharCountGraphemes_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_CharCountGraphemes_Entity!]!
}

"Counts the characters"
type String_CharCount_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

type String_CharCount_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_CharCount_Entity!]!
}

"Returns everything after the last given search"
type String_ChopAfterLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopAfterLast_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopAfterLast_Entity!]!
}

"Returns everything after the given search"
type String_ChopAfter_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopAfter_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopAfter_Entity!]!
}

"Returns everything before the last given search"
type String_ChopBeforeLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopBeforeLast_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopBeforeLast_Entity!]!
}

"Returns everything before the given search"
type String_ChopBefore_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopBefore_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopBefore_Entity!]!
}

"Extracts the prefix from the input"
type String_ChopRemovePrefix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopRemovePrefix_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopRemovePrefix_Entity!]!
}

"Extracts the suffix from the input"
type String_ChopRemoveSuffix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_ChopRemoveSuffix_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_ChopRemoveSuffix_Entity!]!
}

"Concat"
type String_Concat_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

type String_Concat_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_Concat_Entity!]!
}

"Contains"
type String_Contains_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

type String_Contains_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_Contains_Entity!]!
}

"Counts the number of substring appearances in the input string"
type String_CountSubstrings_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

type String_CountSubstrings_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_CountSubstrings_Entity!]!
}

"Counting occurrences of unique words in the input string. This function respects unicode"
type String_CountUniqueWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

type String_CountUniqueWords_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_CountUniqueWords_Entity!]!
}

"Counts the number of words in the input string"
type String_CountWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

type String_CountWords_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_CountWords_Entity!]!
}

"Converts the first character of the input to lower case and convert the rest of the input to lower case"
type String_Decapitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Decapitalize_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Decapitalize_Entity!]!
}

"Ends With"
type String_EndsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

type String_EndsWith_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_EndsWith_Entity!]!
}

"Escapes HTML special characters"
type String_EscapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_EscapeHtml_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_EscapeHtml_Entity!]!
}

"Escapes the regular expression special characters"
type String_EscapeRegexp_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_EscapeRegexp_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_EscapeRegexp_Entity!]!
}

"Checks whether the input string contains contains only alpha and digit characters"
type String_IsAlphaDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsAlphaDigit_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsAlphaDigit_Entity!]!
}

"Checks whether the input string contains only alpha characters"
type String_IsAlpha_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsAlpha_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsAlpha_Entity!]!
}

"Checks whether the input string is empty or contains only whitespaces"
type String_IsBlank_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsBlank_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsBlank_Entity!]!
}

"Checks whether the input string is camelCased"
type String_IsCamelCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsCamelCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsCamelCase_Entity!]!
}

"Checks whether the input string is capitalized and the rest of the input string is lower case"
type String_IsCapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsCapitalize_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsCapitalize_Entity!]!
}

"Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
type String_IsDecapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsDecapitalize_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsDecapitalize_Entity!]!
}

"Checks whether the input string contains only digit characters"
type String_IsDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsDigit_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsDigit_Entity!]!
}

"Checks whether the input string is empty"
type String_IsEmpty_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsEmpty_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsEmpty_Entity!]!
}

"Checks whether the input string is kebab-cased"
type String_IsKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsKebabCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsKebabCase_Entity!]!
}

"Checks whether the input string has the first character in lower case"
type String_IsLowerFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsLowerFirst_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsLowerFirst_Entity!]!
}

"Checks whether the input string has only lower case characters"
type String_IsLowercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsLowercase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsLowercase_Entity!]!
}

"Checks whether the input string is numeric"
type String_IsNumeric_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsNumeric_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsNumeric_Entity!]!
}

"Checks whether the input string is PascalCased"
type String_IsPascalCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsPascalCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsPascalCase_Entity!]!
}

"Checks whether the input string is SHOUTY-KEBAB-CASED"
type String_IsShoutyKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsShoutyKebabCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsShoutyKebabCase_Entity!]!
}

"Checks whether the input string is SHOUTY_SNAKE_CASED"
type String_IsShoutySnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsShoutySnakeCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsShoutySnakeCase_Entity!]!
}

"Checks whether the input string is snake_cased"
type String_IsSnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsSnakeCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsSnakeCase_Entity!]!
}

"Checks whether the input string is a titlecased string and there is at least one character"
type String_IsTitleCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsTitleCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsTitleCase_Entity!]!
}

"Checks whether the input string is Train-Cased"
type String_IsTrainCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsTrainCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsTrainCase_Entity!]!
}

"Checks whether the input string has the first character in upper case"
type String_IsUpperFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsUpperFirst_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsUpperFirst_Entity!]!
}

"Checks whether the input string has only upper case characters"
type String_IsUppercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

type String_IsUppercase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_IsUppercase_Entity!]!
}

"Converts the input to kebab case"
type String_KebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_KebabCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_KebabCase_Entity!]!
}

"Converts the first character of the input to lower case"
type String_LowerFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_LowerFirst_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_LowerFirst_Entity!]!
}

"Lowercase"
type String_Lowercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Lowercase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Lowercase_Entity!]!
}

"Converts the input to pascal case"
type String_PascalCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_PascalCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_PascalCase_Entity!]!
}

"Reverses the given string"
type String_Reverse_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Reverse_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Reverse_Entity!]!
}

"Converts the input to SHOUTY kebab case"
type String_ShoutyKebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_ShoutyKebabCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_ShoutyKebabCase_Entity!]!
}

"Converts the title to SHOUTY snake case"
type String_ShoutySnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_ShoutySnakeCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_ShoutySnakeCase_Entity!]!
}

"Converts the subject to snake case"
type String_SnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_SnakeCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_SnakeCase_Entity!]!
}

"Starts With"
type String_StartsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

type String_StartsWith_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String, rhs: String): [String_StartsWith_Entity!]!
}

"Returns the length of the input string"
type String_StringLength_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

type String_StringLength_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_StringLength_Entity!]!
}

"Strips all HTML tags"
type String_StripHtmlTags_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_StripHtmlTags_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_StripHtmlTags_Entity!]!
}

"Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
type String_SwapCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_SwapCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_SwapCase_Entity!]!
}

"Renders a template"
type String_Templating_Entity implements Entity {
  context: JSON
  id: ID!
  result: String
  template: String
}

type String_Templating_Entity_Mutations {
  delete: [ID!]!
  update(context: JSON, result: String, template: String): [String_Templating_Entity!]!
}

"Converts the input to title case"
type String_TitleCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_TitleCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_TitleCase_Entity!]!
}

"Converts the input to train case"
type String_TrainCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_TrainCase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_TrainCase_Entity!]!
}

"Trim  End"
type String_TrimEnd_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_TrimEnd_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_TrimEnd_Entity!]!
}

"Trim  Start"
type String_TrimStart_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_TrimStart_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_TrimStart_Entity!]!
}

"Trim"
type String_Trim_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Trim_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Trim_Entity!]!
}

"Unescapes HTML special characters"
type String_UnescapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_UnescapeHtml_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_UnescapeHtml_Entity!]!
}

"Converts the first character of the title to upper case"
type String_UpperFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_UpperFirst_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_UpperFirst_Entity!]!
}

"Uppercase"
type String_Uppercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

type String_Uppercase_Entity_Mutations {
  delete: [ID!]!
  update(lhs: String): [String_Uppercase_Entity!]!
}

"Mutations for entities and relations on the namespace System"
type SystemMutations {
  createSystemEnv(id: ID, label: String!, name: String!, value: String): System_SystemEnv_Entity!
  "System Environment Variable"
  systemEnv(id: ID, ids: [ID!], label: String, name: String, value: String): System_SystemEnv_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace System"
type SystemNamespace {
  "System Environment Variable"
  systemEnv(id: String, label: String, name: String, value: String): [System_SystemEnv_Entity!]!
}

"System Environment Variable"
type System_SystemEnv_Entity implements Base_Named_Component & Core_Labeled_Component & Entity & Value_ValueString_Component {
  _c__base__named: ID
  _c__core__labeled: ID
  _c__value__value_string: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  value: String
}

type System_SystemEnv_Entity_Mutations {
  delete: [ID!]!
  update(label: String, name: String): [System_SystemEnv_Entity!]!
}

"Mutations for entities and relations on the namespace Taxonomy"
type TaxonomyMutations {
  "The outbound entity is categorized as the inbound category"
  categorizedAs(inboundId: ID, label: String, outboundId: ID): Taxonomy_CategorizedAs_Relation_Mutations!
  "A category is a fundamental and distinct class to which entities or concepts belong"
  category(description: String, id: ID, ids: [ID!], label: String, name: String): Taxonomy_Category_Entity_Mutations!
  createCategorizedAs(inboundId: ID, instanceId: ID, outboundId: ID, weight: Float!): Taxonomy_CategorizedAs_Relation!
  createCategory(description: String!, id: ID, name: String!): Taxonomy_Category_Entity!
  createHasSubcategory(inboundId: ID, instanceId: ID, outboundId: ID, weight: Float!): Taxonomy_HasSubcategory_Relation!
  createTag(id: ID, label: String!, name: String!): Taxonomy_Tag_Entity!
  createTaggedWith(inboundId: ID, instanceId: ID, label: String!, outboundId: ID, weight: Float!): Taxonomy_TaggedWith_Relation!
  "The outbound category has the inbound entity as sub category"
  hasSubcategory(inboundId: ID, label: String, outboundId: ID): Taxonomy_HasSubcategory_Relation_Mutations!
  "A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
  tag(id: ID, ids: [ID!], label: String, name: String): Taxonomy_Tag_Entity_Mutations!
  "The outbound entity is tagged with the inbound tag"
  taggedWith(inboundId: ID, label: String, outboundId: ID): Taxonomy_TaggedWith_Relation_Mutations!
}

"Queries for components, entities and relations on the namespace Taxonomy"
type TaxonomyNamespace {
  "The outbound entity is categorized as the inbound category"
  categorizedAs(weight: Float): [Taxonomy_CategorizedAs_Relation!]!
  "A category is a fundamental and distinct class to which entities or concepts belong"
  category(description: String, id: String, label: String, name: String): [Taxonomy_Category_Entity!]!
  "The outbound category has the inbound entity as sub category"
  hasSubcategory(weight: Float): [Taxonomy_HasSubcategory_Relation!]!
  "A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
  tag(id: String, label: String, name: String): [Taxonomy_Tag_Entity!]!
  "The outbound entity is tagged with the inbound tag"
  taggedWith(weight: Float): [Taxonomy_TaggedWith_Relation!]!
  weightedComponent: [Taxonomy_Weighted_Component!]!
}

"The outbound entity is categorized as the inbound category"
type Taxonomy_CategorizedAs_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  "The entity which is categorized."
  categorized_entity: AllEntities!
  "The category."
  category: Taxonomy_Category_Entity!
  instance_id: ID!
  key: ID!
  weight: Float
}

type Taxonomy_CategorizedAs_Relation_Mutations {
  delete: [ID!]!
  update(weight: Float): [Taxonomy_CategorizedAs_Relation!]!
}

"A category is a fundamental and distinct class to which entities or concepts belong"
type Taxonomy_Category_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The relations between the category and the categorized entities."
  categorized_as: [Taxonomy_CategorizedAs_Relation!]!
  "The category categorizes these entities."
  categorizes: [AllEntities!]!
  "The description of an entity or a relation"
  description: String
  "The parent categories."
  has_parent_categories: [Taxonomy_HasSubcategory_Relation!]!
  "The sub categories."
  has_sub_categories: [Taxonomy_HasSubcategory_Relation!]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The parent categories."
  parent_categories: [Taxonomy_Category_Entity!]!
  "The sub categories."
  sub_categories: [Taxonomy_Category_Entity!]!
}

type Taxonomy_Category_Entity_Mutations {
  delete: [ID!]!
  update(description: String, name: String): [Taxonomy_Category_Entity!]!
}

"The outbound category has the inbound entity as sub category"
type Taxonomy_HasSubcategory_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  "The parent category."
  parent_category: Taxonomy_Category_Entity!
  "The sub category."
  sub_category: Taxonomy_Category_Entity!
  weight: Float
}

type Taxonomy_HasSubcategory_Relation_Mutations {
  delete: [ID!]!
  update(weight: Float): [Taxonomy_HasSubcategory_Relation!]!
}

"A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
type Taxonomy_Tag_Entity implements Base_Named_Component & Core_Labeled_Component & Entity {
  _c__base__named: ID
  _c__core__labeled: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  "Entities which are tagged by this tag."
  tagged_entities: [AllEntities!]!
  "The weighted relations between the tag and the tagged entities."
  tags_entities: [Taxonomy_TaggedWith_Relation!]!
}

type Taxonomy_Tag_Entity_Mutations {
  delete: [ID!]!
  update(label: String, name: String): [Taxonomy_Tag_Entity!]!
}

"The outbound entity is tagged with the inbound tag"
type Taxonomy_TaggedWith_Relation implements Core_Labeled_Component & Relation & Taxonomy_Weighted_Component {
  _c__core__labeled: ID
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  label: String
  "The tag."
  tag: Taxonomy_Tag_Entity!
  "The entity which is tagged."
  tagged_entity: AllEntities!
  weight: Float
}

type Taxonomy_TaggedWith_Relation_Mutations {
  delete: [ID!]!
  update(label: String, weight: Float): [Taxonomy_TaggedWith_Relation!]!
}

"Queries for components, entities and relations on the namespace Trigger"
type TriggerNamespace {
  "An action can be triggered"
  actionComponent: [Trigger_Action_Component!]!
  "A generator sends a trigger"
  generatorComponent: [Trigger_Generator_Component!]!
}

"Mutations for entities and relations on the namespace Value"
type ValueMutations {
  createValueArray(id: ID, name: String!, value: [JSON!]!): Value_ValueArray_Entity!
  createValueBoolean(id: ID, name: String!, value: Boolean!): Value_ValueBoolean_Entity!
  createValueNumber(id: ID, name: String!, value: Float!): Value_ValueNumber_Entity!
  createValueObject(id: ID, name: String!, value: JSON!): Value_ValueObject_Entity!
  createValueString(id: ID, name: String!, value: String!): Value_ValueString_Entity!
  "Value of type array"
  valueArray(id: ID, ids: [ID!], label: String, name: String, value: [JSON!]): Value_ValueArray_Entity_Mutations!
  "Value of type boolean"
  valueBoolean(id: ID, ids: [ID!], label: String, name: String, value: Boolean): Value_ValueBoolean_Entity_Mutations!
  "Value of type number"
  valueNumber(id: ID, ids: [ID!], label: String, name: String, value: Float): Value_ValueNumber_Entity_Mutations!
  "Value of type object"
  valueObject(id: ID, ids: [ID!], label: String, name: String, value: JSON): Value_ValueObject_Entity_Mutations!
  "Value of type string"
  valueString(id: ID, ids: [ID!], label: String, name: String, value: String): Value_ValueString_Entity_Mutations!
}

"Queries for components, entities and relations on the namespace Value"
type ValueNamespace {
  "Value of type array"
  valueArray(id: String, label: String, name: String, value: [JSON!]): [Value_ValueArray_Entity!]!
  "Value of type array"
  valueArrayComponent: [Value_ValueArray_Component!]!
  "Value of type boolean"
  valueBoolean(id: String, label: String, name: String, value: Boolean): [Value_ValueBoolean_Entity!]!
  "Value of type boolean"
  valueBooleanComponent: [Value_ValueBoolean_Component!]!
  valueDebuggerDebugComponent: [Value_ValueDebuggerDebug_Component!]!
  valueDebuggerTraceComponent: [Value_ValueDebuggerTrace_Component!]!
  "Value of type number"
  valueNumber(id: String, label: String, name: String, value: Float): [Value_ValueNumber_Entity!]!
  "Value of type number"
  valueNumberComponent: [Value_ValueNumber_Component!]!
  "Value of type object"
  valueObject(id: String, label: String, name: String, value: JSON): [Value_ValueObject_Entity!]!
  "Value of type object"
  valueObjectComponent: [Value_ValueObject_Component!]!
  "Value of type string"
  valueString(id: String, label: String, name: String, value: String): [Value_ValueString_Entity!]!
  "Value of type string"
  valueStringComponent: [Value_ValueString_Component!]!
}

"Value of type array"
type Value_ValueArray_Entity implements Base_Named_Component & Entity & Value_ValueArray_Component {
  _c__base__named: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: JSON
}

type Value_ValueArray_Entity_Mutations {
  delete: [ID!]!
  update(name: String, value: [JSON!]): [Value_ValueArray_Entity!]!
}

"Value of type boolean"
type Value_ValueBoolean_Entity implements Base_Named_Component & Entity & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Boolean
}

type Value_ValueBoolean_Entity_Mutations {
  delete: [ID!]!
  update(name: String, value: Boolean): [Value_ValueBoolean_Entity!]!
}

"Value of type number"
type Value_ValueNumber_Entity implements Base_Named_Component & Entity & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Float
}

type Value_ValueNumber_Entity_Mutations {
  delete: [ID!]!
  update(name: String, value: Float): [Value_ValueNumber_Entity!]!
}

"Value of type object"
type Value_ValueObject_Entity implements Base_Named_Component & Entity & Value_ValueObject_Component {
  _c__base__named: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: JSON
}

type Value_ValueObject_Entity_Mutations {
  delete: [ID!]!
  update(name: String, value: JSON): [Value_ValueObject_Entity!]!
}

"Value of type string"
type Value_ValueString_Entity implements Base_Named_Component & Entity & Value_ValueString_Component {
  _c__base__named: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}

type Value_ValueString_Entity_Mutations {
  delete: [ID!]!
  update(name: String, value: String): [Value_ValueString_Entity!]!
}

scalar JSON
